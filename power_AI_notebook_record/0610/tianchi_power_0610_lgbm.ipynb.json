{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 读取原始数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2900464.0\n",
      "['2015.0' '3.0' '1.0' '6.0' '60.0' 2.0 0.0 1219955.32821 230498.695833\n",
      " -342783.154545 -1352485.7 -93716.5375 -220744.01428600002 -739169.857143\n",
      " -1042483.85714 252348.35714299997]\n",
      "Start training...\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>power_consumption</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>dow</th>\n",
       "      <th>doy</th>\n",
       "      <th>season</th>\n",
       "      <th>isworkday</th>\n",
       "      <th>first_half</th>\n",
       "      <th>second_half</th>\n",
       "      <th>month_period_1</th>\n",
       "      <th>month_period_2</th>\n",
       "      <th>month_period_3</th>\n",
       "      <th>week_period_1</th>\n",
       "      <th>week_period_2</th>\n",
       "      <th>week_period_3</th>\n",
       "      <th>week_period_4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2900464.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1.219955e+06</td>\n",
       "      <td>230498.695833</td>\n",
       "      <td>-342783.154545</td>\n",
       "      <td>-1352485.7</td>\n",
       "      <td>-93716.5375</td>\n",
       "      <td>-220744.014286</td>\n",
       "      <td>-739169.857143</td>\n",
       "      <td>-1.042484e+06</td>\n",
       "      <td>252348.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3334082.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1.219955e+06</td>\n",
       "      <td>230498.695833</td>\n",
       "      <td>-342783.154545</td>\n",
       "      <td>-1352485.7</td>\n",
       "      <td>-93716.5375</td>\n",
       "      <td>-220744.014286</td>\n",
       "      <td>-739169.857143</td>\n",
       "      <td>-1.042484e+06</td>\n",
       "      <td>252348.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3492606.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1.219955e+06</td>\n",
       "      <td>230498.695833</td>\n",
       "      <td>-342783.154545</td>\n",
       "      <td>-1352485.7</td>\n",
       "      <td>-93716.5375</td>\n",
       "      <td>-220744.014286</td>\n",
       "      <td>-739169.857143</td>\n",
       "      <td>-1.042484e+06</td>\n",
       "      <td>252348.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3597890.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>63</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1.219955e+06</td>\n",
       "      <td>230498.695833</td>\n",
       "      <td>-342783.154545</td>\n",
       "      <td>-1352485.7</td>\n",
       "      <td>-93716.5375</td>\n",
       "      <td>-220744.014286</td>\n",
       "      <td>-739169.857143</td>\n",
       "      <td>-1.042484e+06</td>\n",
       "      <td>252348.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1798044.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>64</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1.219955e+06</td>\n",
       "      <td>230498.695833</td>\n",
       "      <td>-342783.154545</td>\n",
       "      <td>-1352485.7</td>\n",
       "      <td>-93716.5375</td>\n",
       "      <td>-220744.014286</td>\n",
       "      <td>-739169.857143</td>\n",
       "      <td>-1.042484e+06</td>\n",
       "      <td>252348.357143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   power_consumption  year  month  day  dow  doy  season  isworkday  \\\n",
       "0          2900464.0  2015      3    1    6   60       2          0   \n",
       "1          3334082.0  2015      3    2    0   61       2          1   \n",
       "2          3492606.0  2015      3    3    1   62       2          1   \n",
       "3          3597890.0  2015      3    4    2   63       2          1   \n",
       "4          1798044.0  2015      3    5    3   64       2          0   \n",
       "\n",
       "     first_half    second_half  month_period_1  month_period_2  \\\n",
       "0  1.219955e+06  230498.695833  -342783.154545      -1352485.7   \n",
       "1  1.219955e+06  230498.695833  -342783.154545      -1352485.7   \n",
       "2  1.219955e+06  230498.695833  -342783.154545      -1352485.7   \n",
       "3  1.219955e+06  230498.695833  -342783.154545      -1352485.7   \n",
       "4  1.219955e+06  230498.695833  -342783.154545      -1352485.7   \n",
       "\n",
       "   month_period_3  week_period_1  week_period_2  week_period_3  week_period_4  \n",
       "0     -93716.5375 -220744.014286 -739169.857143  -1.042484e+06  252348.357143  \n",
       "1     -93716.5375 -220744.014286 -739169.857143  -1.042484e+06  252348.357143  \n",
       "2     -93716.5375 -220744.014286 -739169.857143  -1.042484e+06  252348.357143  \n",
       "3     -93716.5375 -220744.014286 -739169.857143  -1.042484e+06  252348.357143  \n",
       "4     -93716.5375 -220744.014286 -739169.857143  -1.042484e+06  252348.357143  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "### 生成训练集和测试集\n",
    "\n",
    "import pandas as pd\n",
    "df_final = pd.read_csv('train.csv')\n",
    "\n",
    "# df_final = df_final.drop('record_date',1)\n",
    "\n",
    "final_train_data = df_final[~((df_final.year==2016)&(df_final.month==10))].drop(['power_consumption'],1)\n",
    "final_train_data = final_train_data.astype(float)\n",
    "final_test_data = df_final[((df_final.year==2016)&(df_final.month==10))].drop(['power_consumption'],1)\n",
    "final_test_data = final_test_data.astype(float)\n",
    "train_target = df_final[~((df_final.year==2016)&(df_final.month==10))][['power_consumption']]\n",
    "\n",
    "train_lgb = final_train_data.copy()\n",
    "train_lgb[['dow','doy','day','month','year']] = train_lgb[['dow','doy','day','month','year']]\\\n",
    ".astype(str)\n",
    "test_lgb = final_test_data.copy()\n",
    "test_lgb[['dow','doy','day','month','year']] = test_lgb[['dow','doy','day','month','year',]]\\\n",
    ".astype(str)\n",
    "\n",
    "X_lgb = train_lgb.values\n",
    "y_lgb = train_target.values.reshape(train_target.values.shape[0],)\n",
    "print y_lgb[0]\n",
    "print X_lgb[0,:]\n",
    "\n",
    "#随机敲定一组参数跑模型\n",
    "import lightgbm as lgb\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "# create dataset for lightgbm\n",
    "lgb_train = lgb.Dataset(X_lgb, y_lgb)\n",
    "# specify your configurations as a dict\n",
    "params = {\n",
    "    'num_leaves': 1024,\n",
    "    'learning_rate':0.42,\n",
    "    'n_estimators':30,\n",
    "    'feature_fraction': 1,\n",
    "    'bagging_fraction': 0.8,\n",
    "    'bagging_freq': 5\n",
    "}\n",
    "\n",
    "print('Start training...')\n",
    "# train\n",
    "\n",
    "evals_result = {}  # to record eval results for plotting\n",
    "\n",
    "gbm = lgb.train(params,\n",
    "                lgb_train,\n",
    "                num_boost_round=30,\n",
    "                feature_name=list(final_train_data.columns))\n",
    "\n",
    "\n",
    "# gbm = lgb.train(params,\n",
    "#                 lgb_train,\n",
    "#                 num_boost_round=30,\n",
    "# #                 valid_sets=[lgb_train, lgb_test],\n",
    "#                 feature_name=list(final_train_data.columns)),\n",
    "# #                 categorical_feature=[21],\n",
    "#                 evals_result=evals_result,\n",
    "# #                 verbose_eval=10\n",
    "#         )\n",
    "df_final.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 特征重要度排序"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plot feature importances...\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nRJqyeSnHAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fd40e98f310>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "print('Plot feature importances...')\n",
    "ax = lgb.plot_importance(gbm, max_num_features=20)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>predict_date</th>\n",
       "      <th>predict_power_consumption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016-10-01</td>\n",
       "      <td>3478094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016-10-02</td>\n",
       "      <td>3478094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016-10-03</td>\n",
       "      <td>3470864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016-10-04</td>\n",
       "      <td>3470864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2016-10-05</td>\n",
       "      <td>3470864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2016-10-06</td>\n",
       "      <td>3470864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2016-10-07</td>\n",
       "      <td>3454888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2016-10-08</td>\n",
       "      <td>3736412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2016-10-09</td>\n",
       "      <td>3736412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2016-10-10</td>\n",
       "      <td>3729182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2016-10-11</td>\n",
       "      <td>3729182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2016-10-12</td>\n",
       "      <td>3729182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2016-10-13</td>\n",
       "      <td>3788251</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2016-10-14</td>\n",
       "      <td>3772275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2016-10-15</td>\n",
       "      <td>3591031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2016-10-16</td>\n",
       "      <td>3591031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2016-10-17</td>\n",
       "      <td>3765239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2016-10-18</td>\n",
       "      <td>3765239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2016-10-19</td>\n",
       "      <td>3765239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2016-10-20</td>\n",
       "      <td>3765239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2016-10-21</td>\n",
       "      <td>3749262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2016-10-22</td>\n",
       "      <td>3667745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2016-10-23</td>\n",
       "      <td>3667745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2016-10-24</td>\n",
       "      <td>3864965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2016-10-25</td>\n",
       "      <td>3864965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2016-10-26</td>\n",
       "      <td>3864965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2016-10-27</td>\n",
       "      <td>3864965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2016-10-28</td>\n",
       "      <td>3848989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2016-10-29</td>\n",
       "      <td>3667745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>2016-10-30</td>\n",
       "      <td>3667745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>2016-10-31</td>\n",
       "      <td>3864965</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   predict_date  predict_power_consumption\n",
       "0    2016-10-01                    3478094\n",
       "1    2016-10-02                    3478094\n",
       "2    2016-10-03                    3470864\n",
       "3    2016-10-04                    3470864\n",
       "4    2016-10-05                    3470864\n",
       "5    2016-10-06                    3470864\n",
       "6    2016-10-07                    3454888\n",
       "7    2016-10-08                    3736412\n",
       "8    2016-10-09                    3736412\n",
       "9    2016-10-10                    3729182\n",
       "10   2016-10-11                    3729182\n",
       "11   2016-10-12                    3729182\n",
       "12   2016-10-13                    3788251\n",
       "13   2016-10-14                    3772275\n",
       "14   2016-10-15                    3591031\n",
       "15   2016-10-16                    3591031\n",
       "16   2016-10-17                    3765239\n",
       "17   2016-10-18                    3765239\n",
       "18   2016-10-19                    3765239\n",
       "19   2016-10-20                    3765239\n",
       "20   2016-10-21                    3749262\n",
       "21   2016-10-22                    3667745\n",
       "22   2016-10-23                    3667745\n",
       "23   2016-10-24                    3864965\n",
       "24   2016-10-25                    3864965\n",
       "25   2016-10-26                    3864965\n",
       "26   2016-10-27                    3864965\n",
       "27   2016-10-28                    3848989\n",
       "28   2016-10-29                    3667745\n",
       "29   2016-10-30                    3667745\n",
       "30   2016-10-31                    3864965"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "commit_df = pd.date_range('2016/10/1', periods=31, freq='D')\n",
    "commit_df = pd.DataFrame(commit_df)\n",
    "commit_df.columns = ['predict_date']\n",
    "y_predict = gbm.predict(test_lgb.values)\n",
    "commit_df['predict_power_consumption'] = pd.DataFrame(y_predict).astype('int')\n",
    "commit_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# 生成提交结果文件\n",
    "# 转换日期格式 \n",
    "\n",
    "from datetime import datetime \n",
    "\n",
    "def timetransform(t):\n",
    "    t = str(t)[0:10]\n",
    "    time = datetime.strptime(t, '%Y-%m-%d')\n",
    "    res = time.strftime('%Y%m%d')\n",
    "    return res\n",
    "\n",
    "commit_df['predict_date'] = commit_df['predict_date'].apply(timetransform)\n",
    "\n",
    "commit_df.head()\n",
    "commit_df.to_csv('Tianchi_power_predict_table.csv',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# 读入最好的成绩 做参考\n",
    "# ref = pd.read_csv('predict_liuxin.csv')\n",
    "# test_x = pd.read_csv('test.csv')\n",
    "# train_y = train['power_consumption']\n",
    "# train_X = train.drop('power_consumption',axis=1)\n",
    "# train_X.shape\n",
    "# ref"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# 读取当前预测结果\n",
    "train = pd.read_csv('Tianchi_power_predict_table.csv')\n",
    "# test_x = pd.read_csv('test.csv')\n",
    "# train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fd40ea7b0d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y2 = train['predict_power_consumption'].values\n",
    "\n",
    "x = train['predict_date'].values\n",
    "\n",
    "# y = ref['predict_power_consumption'].values\n",
    "\n",
    "# plt.plot(x, y)\n",
    "plt.plot(x,y2)\n",
    "plt.legend()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
