{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 读取原始数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>record_date</th>\n",
       "      <th>user_id</th>\n",
       "      <th>power_consumption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>1</td>\n",
       "      <td>570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>1</td>\n",
       "      <td>3418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>1</td>\n",
       "      <td>3968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>1</td>\n",
       "      <td>3986</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  record_date  user_id  power_consumption\n",
       "0  2015-01-01        1               1135\n",
       "1  2015-01-02        1                570\n",
       "2  2015-01-03        1               3418\n",
       "3  2015-01-04        1               3968\n",
       "4  2015-01-05        1               3986"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"Tianchi_power.csv\")\n",
    "df['record_date'] = pd.to_datetime(df['record_date'])\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 填充缺省值"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>record_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id record_date\n",
       "0        1  2015-01-01\n",
       "1        1  2015-01-02"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dates = pd.date_range(\"2015-01-01\",\"2016-08-31\", freq=\"1D\")\n",
    "userid = pd.DataFrame({'user_id':df['user_id'].unique()})\n",
    "dates = pd.DataFrame(dates)\n",
    "dates.columns = ['record_date']\n",
    "userid['key'] = 0\n",
    "dates['key'] = 0\n",
    "full = userid.merge(dates, how='left', on = 'key')\n",
    "full.drop('key',1, inplace=True)\n",
    "full.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(885486, 3)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.merge(full, df, how='left', on=['user_id','record_date'])\n",
    "df['power_consumption'] = df['power_consumption'].interpolate()\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 填充特征"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df['dow'] = df['record_date'].apply(lambda x: x.dayofweek)\n",
    "df['doy'] = df['record_date'].apply(lambda x: x.dayofyear)\n",
    "df['day'] = df['record_date'].apply(lambda x: x.day)\n",
    "df['month'] = df['record_date'].apply(lambda x: x.month)\n",
    "df['year'] = df['record_date'].apply(lambda x: x.year)\n",
    "\n",
    "def map_season(month):\n",
    "    month_dic = {1:1, 2:1, 3:2, 4:2, 5:3, 6:3, 7:3, 8:3, 9:3, 10:4, 11:4, 12:1}\n",
    "    return month_dic[month]\n",
    "\n",
    "df['season'] = df['month'].apply(lambda x: map_season(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(609, 2)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### 用电量聚合到一个月\n",
    "\n",
    "base_df = df[['record_date','power_consumption']].groupby(by='record_date').agg('sum')\n",
    "base_df = base_df.reset_index()\n",
    "base_df.head()\n",
    "base_df.shape\n",
    "# df = base_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 拼接测试集"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>record_date</th>\n",
       "      <th>power_consumption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>578</th>\n",
       "      <td>2016-09-01</td>\n",
       "      <td>4627029.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>579</th>\n",
       "      <td>2016-09-02</td>\n",
       "      <td>4618467.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>580</th>\n",
       "      <td>2016-09-03</td>\n",
       "      <td>4490739.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>581</th>\n",
       "      <td>2016-09-04</td>\n",
       "      <td>4367727.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>582</th>\n",
       "      <td>2016-09-05</td>\n",
       "      <td>4253298.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    record_date  power_consumption\n",
       "578  2016-09-01          4627029.0\n",
       "579  2016-09-02          4618467.0\n",
       "580  2016-09-03          4490739.0\n",
       "581  2016-09-04          4367727.0\n",
       "582  2016-09-05          4253298.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test = base_df[(base_df.record_date>='2016-08-01')&(base_df.record_date<='2016-08-30')]\n",
    "df_test['record_date'] = pd.DataFrame(df_test['record_date']+pd.Timedelta('31 days'))\n",
    "df_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>record_date</th>\n",
       "      <th>power_consumption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2900575.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>3158211.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>3596487.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>3939672.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>4101790.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  record_date  power_consumption\n",
       "0  2015-01-01          2900575.0\n",
       "1  2015-01-02          3158211.0\n",
       "2  2015-01-03          3596487.0\n",
       "3  2015-01-04          3939672.0\n",
       "4  2015-01-05          4101790.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.concat([base_df, df_test]).sort_values(['record_date'])\n",
    "# base_df.shape\n",
    "\n",
    "# df = base_df\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>record_date</th>\n",
       "      <th>power_consumption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2900575.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>3158211.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>3596487.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>3939672.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>4101790.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  record_date  power_consumption\n",
       "0  2015-01-01          2900575.0\n",
       "1  2015-01-02          3158211.0\n",
       "2  2015-01-03          3596487.0\n",
       "3  2015-01-04          3939672.0\n",
       "4  2015-01-05          4101790.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "base_df = df\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 造特征"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "base_df['dow'] = base_df['record_date'].apply(lambda x: x.dayofweek)\n",
    "base_df['doy'] = base_df['record_date'].apply(lambda x: x.dayofyear)\n",
    "base_df['day'] = base_df['record_date'].apply(lambda x: x.day)\n",
    "base_df['month'] = base_df['record_date'].apply(lambda x: x.month)\n",
    "base_df['year'] = base_df['record_date'].apply(lambda x: x.year)\n",
    "\n",
    "def map_season(month):\n",
    "    month_dic = {1:1, 2:1, 3:2, 4:2, 5:3, 6:3, 7:3, 8:3, 9:3, 10:4, 11:4, 12:1}\n",
    "    return month_dic[month]\n",
    "\n",
    "# base_df['season'] = base_df['month'].apply(lambda x: map_season(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 添加更多特征\n",
    "### 先添加前一个月的均值和方差"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015</td>\n",
       "      <td>2</td>\n",
       "      <td>3.961383e+06</td>\n",
       "      <td>303629.486622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015</td>\n",
       "      <td>3</td>\n",
       "      <td>2.795163e+06</td>\n",
       "      <td>769697.864999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015</td>\n",
       "      <td>4</td>\n",
       "      <td>3.478852e+06</td>\n",
       "      <td>564753.747993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015</td>\n",
       "      <td>5</td>\n",
       "      <td>3.768333e+06</td>\n",
       "      <td>190787.832757</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   year  month          mean            std\n",
       "0  2015      1           NaN            NaN\n",
       "1  2015      2  3.961383e+06  303629.486622\n",
       "2  2015      3  2.795163e+06  769697.864999\n",
       "3  2015      4  3.478852e+06  564753.747993\n",
       "4  2015      5  3.768333e+06  190787.832757"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_stats = base_df[['power_consumption','year','month']].groupby(by=['year', 'month']).agg(['mean', 'std'])\n",
    "df_stats.head()\n",
    "\n",
    "df_stats.columns = df_stats.columns.droplevel(0)\n",
    "df_stats = df_stats.reset_index()\n",
    "df_stats.head()\n",
    "df_stats['mean'] = df_stats['mean'].shift(1)\n",
    "# df_stats['2_m_mean'] = df_stats['mean'].shift(2)\n",
    "df_stats['std'] = df_stats['std'].shift(1)\n",
    "# df_stats['2_m_std'] = df_stats['std'].shift(2)\n",
    "df_stats.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>record_date</th>\n",
       "      <th>power_consumption</th>\n",
       "      <th>dow</th>\n",
       "      <th>doy</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2900575.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>3158211.0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>3596487.0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>3939672.0</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>4101790.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  record_date  power_consumption  dow  doy  day  month  year  mean  std\n",
       "0  2015-01-01          2900575.0    3    1    1      1  2015   NaN  NaN\n",
       "1  2015-01-02          3158211.0    4    2    2      1  2015   NaN  NaN\n",
       "2  2015-01-03          3596487.0    5    3    3      1  2015   NaN  NaN\n",
       "3  2015-01-04          3939672.0    6    4    4      1  2015   NaN  NaN\n",
       "4  2015-01-05          4101790.0    0    5    5      1  2015   NaN  NaN"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train = pd.merge('base_df','df_stats',on=['year','month'])\n",
    "train = pd.merge(base_df, df_stats, how='left', on=['year','month'])\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 把一个月分成上下 半月\n",
    "### 用它们的均值之差表示数据上下起伏趋势"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>first_half</th>\n",
       "      <th>second_half</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015</td>\n",
       "      <td>2</td>\n",
       "      <td>nan</td>\n",
       "      <td>156902.8125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015</td>\n",
       "      <td>3</td>\n",
       "      <td>-674272.145833</td>\n",
       "      <td>-1223101.62821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015</td>\n",
       "      <td>4</td>\n",
       "      <td>1219955.32821</td>\n",
       "      <td>230498.695833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015</td>\n",
       "      <td>5</td>\n",
       "      <td>164766.270833</td>\n",
       "      <td>26365.9333333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   year  month      first_half     second_half\n",
       "0  2015      1             NaN             NaN\n",
       "1  2015      2             nan     156902.8125\n",
       "2  2015      3  -674272.145833  -1223101.62821\n",
       "3  2015      4   1219955.32821   230498.695833\n",
       "4  2015      5   164766.270833   26365.9333333"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 先对一个月做切分\n",
    "def month_half(day):\n",
    "    if day>=1 and day<=15:\n",
    "        return 1\n",
    "    else:\n",
    "        return 2\n",
    "\n",
    "base_df['month_half'] = base_df['day'].apply(lambda x:month_half(x))\n",
    "# base_df['week_period'] = base_df['day'].apply(lambda x:week_period(x))\n",
    "\n",
    "half = base_df[['power_consumption','year','month','month_half']].groupby(by=['year', 'month', 'month_half']).agg('mean')\n",
    "half = half.reset_index()\n",
    "half.head()\n",
    "\n",
    "half['month_half'] = half['power_consumption'].diff(1)\n",
    "month_period_df = half.drop('power_consumption',1)\n",
    "# half.head()\n",
    "\n",
    "month_period_df = month_period_df[['year','month','month_half']].groupby(by=['year','month']).agg(lambda x: \",\".join(x.apply(str).values.tolist()))\n",
    "month_period_df = month_period_df.reset_index()\n",
    "month_period_df[['first_half','second_half']] =  month_period_df['month_half'].str.split(',', expand=True) \n",
    "month_period_df = month_period_df.drop('month_half',1)\n",
    "\n",
    "# month_1_columns = [tmp+'_1month' for tmp in ['month_period_1', 'month_period_2','month_period_3']]\n",
    "month_period_df[['first_half','second_half']] = month_period_df[['first_half','second_half']].shift(1)\n",
    "# month_2_columns = [tmp+'_2month' for tmp in ['month_period_1', 'month_period_2','month_period_3']]\n",
    "# month_period_df[month_2_columns] = month_period_df[['month_period_1', 'month_period_2','month_period_3']].shift(2)\n",
    "\n",
    "month_period_df.head()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>record_date</th>\n",
       "      <th>power_consumption</th>\n",
       "      <th>dow</th>\n",
       "      <th>doy</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>first_half</th>\n",
       "      <th>second_half</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2900575.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>3158211.0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>3596487.0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>3939672.0</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>4101790.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  record_date  power_consumption  dow  doy  day  month  year  mean  std  \\\n",
       "0  2015-01-01          2900575.0    3    1    1      1  2015   NaN  NaN   \n",
       "1  2015-01-02          3158211.0    4    2    2      1  2015   NaN  NaN   \n",
       "2  2015-01-03          3596487.0    5    3    3      1  2015   NaN  NaN   \n",
       "3  2015-01-04          3939672.0    6    4    4      1  2015   NaN  NaN   \n",
       "4  2015-01-05          4101790.0    0    5    5      1  2015   NaN  NaN   \n",
       "\n",
       "  first_half second_half  \n",
       "0        NaN         NaN  \n",
       "1        NaN         NaN  \n",
       "2        NaN         NaN  \n",
       "3        NaN         NaN  \n",
       "4        NaN         NaN  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# 合并\n",
    "train =  pd.merge(train, month_period_df, how='left', on=['year','month'])\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 把一个月分成上中下旬3个month_periods 或者 4周总共4个week_periods\n",
    "### 用它们的均值之差表示数据上下起伏趋势"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# 先对一个月做切分\n",
    "def month_period(day):\n",
    "    if day>=1 and day<=10:\n",
    "        return 1\n",
    "    elif day>=11 and day<=20:\n",
    "        return 2\n",
    "    else:\n",
    "        return 3\n",
    "\n",
    "def week_period(day):\n",
    "    if day>=1 and day<=7:\n",
    "        return 1\n",
    "    elif day>=8 and day<=14:\n",
    "        return 2\n",
    "    elif day>=15 and day<=21:\n",
    "        return 3\n",
    "    else:\n",
    "        return 4\n",
    "\n",
    "base_df['month_period'] = base_df['day'].apply(lambda x:month_period(x))\n",
    "base_df['week_period'] = base_df['day'].apply(lambda x:week_period(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 按照period求均值"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>month_period</th>\n",
       "      <th>power_consumption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3.825766e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4.016926e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4.034177e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3.691394e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2.338909e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   year  month  month_period  power_consumption\n",
       "0  2015      1             1       3.825766e+06\n",
       "1  2015      1             2       4.016926e+06\n",
       "2  2015      1             3       4.034177e+06\n",
       "3  2015      2             1       3.691394e+06\n",
       "4  2015      2             2       2.338909e+06"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "month_period_df = base_df[['power_consumption','year','month','month_period']].groupby(by=['year', 'month', 'month_period']).agg('mean')\n",
    "month_period_df = month_period_df.reset_index()\n",
    "month_period_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 求出来均值之差"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "month_period_df['month_period'] = month_period_df['power_consumption'].diff(1)\n",
    "month_period_df['3sepmean'] = month_period_df['power_consumption']#.diff(1)\n",
    "month_period_df = month_period_df.drop('power_consumption',1)\n",
    "month_period_df.head()\n",
    "\n",
    "mdf = month_period_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 填充上个月和上上个月的趋势数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>3sepmean_1</th>\n",
       "      <th>3sepmean_2</th>\n",
       "      <th>3sepmean_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015</td>\n",
       "      <td>2</td>\n",
       "      <td>3825766.2</td>\n",
       "      <td>4016926.2</td>\n",
       "      <td>4034177.45455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015</td>\n",
       "      <td>3</td>\n",
       "      <td>3691394.3</td>\n",
       "      <td>2338908.6</td>\n",
       "      <td>2245192.0625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015</td>\n",
       "      <td>4</td>\n",
       "      <td>3108414.7</td>\n",
       "      <td>3667572.75</td>\n",
       "      <td>3644050.09091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015</td>\n",
       "      <td>5</td>\n",
       "      <td>3753272.1</td>\n",
       "      <td>3727802.35</td>\n",
       "      <td>3823925.45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   year  month 3sepmean_1  3sepmean_2     3sepmean_3\n",
       "0  2015      1        NaN         NaN            NaN\n",
       "1  2015      2  3825766.2   4016926.2  4034177.45455\n",
       "2  2015      3  3691394.3   2338908.6   2245192.0625\n",
       "3  2015      4  3108414.7  3667572.75  3644050.09091\n",
       "4  2015      5  3753272.1  3727802.35     3823925.45"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "month_period_df = month_period_df[['year','month','month_period']].groupby(by=['year','month']).agg(lambda x: \",\".join(x.apply(str).values.tolist()))\n",
    "month_period_df = month_period_df.reset_index()\n",
    "month_period_df[['month_period_1','month_period_2','month_period_3']] =  month_period_df['month_period'].str.split(',', expand=True) \n",
    "month_period_df = month_period_df.drop('month_period',1)\n",
    "\n",
    "# month_1_columns = [tmp+'_1month' for tmp in ['month_period_1', 'month_period_2','month_period_3']]\n",
    "month_period_df[['month_period_1', 'month_period_2','month_period_3']] = month_period_df[['month_period_1', 'month_period_2','month_period_3']].shift(1)\n",
    "\n",
    "\n",
    "# 添加每一旬的均值做为特征\n",
    "mdf = mdf[['year','month','3sepmean']].groupby(by=['year','month']).agg(lambda x: \",\".join(x.apply(str).values.tolist()))\n",
    "mdf = mdf.reset_index()\n",
    "mdf[['3sepmean_1','3sepmean_2','3sepmean_3']] =  mdf['3sepmean'].str.split(',', expand=True) \n",
    "mdf = mdf.drop('3sepmean',1)\n",
    "\n",
    "# month_1_columns = [tmp+'_1month' for tmp in ['month_period_1', 'month_period_2','month_period_3']]\n",
    "mdf[['3sepmean_1','3sepmean_2','3sepmean_3']] = mdf[['3sepmean_1','3sepmean_2','3sepmean_3']].shift(1)\n",
    "# month_2_columns = [tmp+'_2month' for tmp in ['month_period_1', 'month_period_2','month_period_3']]\n",
    "# month_period_df[month_2_columns] = month_period_df[['month_period_1', 'month_period_2','month_period_3']].shift(2)\n",
    "\n",
    "mdf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>record_date</th>\n",
       "      <th>power_consumption</th>\n",
       "      <th>dow</th>\n",
       "      <th>doy</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>first_half</th>\n",
       "      <th>second_half</th>\n",
       "      <th>month_period_1</th>\n",
       "      <th>month_period_2</th>\n",
       "      <th>month_period_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-01</td>\n",
       "      <td>2900575.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-02</td>\n",
       "      <td>3158211.0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-03</td>\n",
       "      <td>3596487.0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-04</td>\n",
       "      <td>3939672.0</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-05</td>\n",
       "      <td>4101790.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  record_date  power_consumption  dow  doy  day  month  year  mean  std  \\\n",
       "0  2015-01-01          2900575.0    3    1    1      1  2015   NaN  NaN   \n",
       "1  2015-01-02          3158211.0    4    2    2      1  2015   NaN  NaN   \n",
       "2  2015-01-03          3596487.0    5    3    3      1  2015   NaN  NaN   \n",
       "3  2015-01-04          3939672.0    6    4    4      1  2015   NaN  NaN   \n",
       "4  2015-01-05          4101790.0    0    5    5      1  2015   NaN  NaN   \n",
       "\n",
       "  first_half second_half month_period_1 month_period_2 month_period_3  \n",
       "0        NaN         NaN            NaN            NaN            NaN  \n",
       "1        NaN         NaN            NaN            NaN            NaN  \n",
       "2        NaN         NaN            NaN            NaN            NaN  \n",
       "3        NaN         NaN            NaN            NaN            NaN  \n",
       "4        NaN         NaN            NaN            NaN            NaN  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 合并\n",
    "train_mon =  pd.merge(train, month_period_df, how='left', on=['year','month'])\n",
    "train_mon.head()\n",
    "\n",
    "# train_mon =  pd.merge(train_mon, mdf, how='left', on=['year','month'])\n",
    "# train_mon.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "week_period_df = base_df[['power_consumption','year','month','week_period']].groupby(by=['year', 'month', 'week_period']).agg('mean')\n",
    "week_period_df = week_period_df.reset_index()\n",
    "# week_period_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "week_period_df['week_period'] = week_period_df['power_consumption'].diff(1)\n",
    "week_period_df = week_period_df.drop('power_consumption',1)\n",
    "# week_period_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>week_period_1</th>\n",
       "      <th>week_period_2</th>\n",
       "      <th>week_period_3</th>\n",
       "      <th>week_period_4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015</td>\n",
       "      <td>2</td>\n",
       "      <td>nan</td>\n",
       "      <td>297703.428571</td>\n",
       "      <td>46736.2857143</td>\n",
       "      <td>-31404.2714286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015</td>\n",
       "      <td>3</td>\n",
       "      <td>-220744.014286</td>\n",
       "      <td>-739169.857143</td>\n",
       "      <td>-1042483.85714</td>\n",
       "      <td>252348.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015</td>\n",
       "      <td>4</td>\n",
       "      <td>645923.071429</td>\n",
       "      <td>821015.214286</td>\n",
       "      <td>-292440.071429</td>\n",
       "      <td>245783.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015</td>\n",
       "      <td>5</td>\n",
       "      <td>-9620.85714286</td>\n",
       "      <td>113845.428571</td>\n",
       "      <td>-66743.6428571</td>\n",
       "      <td>91990.9047619</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   year  month   week_period_1   week_period_2   week_period_3   week_period_4\n",
       "0  2015      1             NaN             NaN             NaN             NaN\n",
       "1  2015      2             nan   297703.428571   46736.2857143  -31404.2714286\n",
       "2  2015      3  -220744.014286  -739169.857143  -1042483.85714   252348.357143\n",
       "3  2015      4   645923.071429   821015.214286  -292440.071429   245783.857143\n",
       "4  2015      5  -9620.85714286   113845.428571  -66743.6428571   91990.9047619"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 将每个月中四个周的值分为四列。\n",
    "week_period_df = week_period_df[['year','month','week_period']].groupby(by=['year','month']).agg(lambda x: \",\".join(x.apply(str).values.tolist()))\n",
    "week_period_df = week_period_df.reset_index()\n",
    "week_period_df[['week_period_1','week_period_2','week_period_3','week_period_4']] =  week_period_df['week_period'].str.split(',', expand=True) \n",
    "week_period_df = week_period_df.drop('week_period',1)\n",
    "\n",
    "add_columns_1 = [tmp+'_1month' for tmp in ['week_period_1', 'week_period_2','week_period_3', 'week_period_4']]\n",
    "week_period_df[['week_period_1','week_period_2','week_period_3','week_period_4']] = week_period_df[['week_period_1', 'week_period_2','week_period_3', 'week_period_4']].shift(1)\n",
    "# add_columns_2 = [tmp+'_2month' for tmp in ['week_period_1', 'week_period_2','week_period_3', 'week_period_4']]\n",
    "# week_period_df[add_columns_2] = week_period_df[['week_period_1', 'week_period_2','week_period_3', 'week_period_4']].shift(2)\n",
    "\n",
    "week_period_df.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# 添加 week period 相关特征\n",
    "df_final = pd.merge(train_mon, week_period_df, how='left', on=['year','month']) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# df_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([u'record_date', u'power_consumption', u'dow', u'doy', u'day', u'month',\n",
       "       u'year', u'mean', u'std', u'first_half', u'second_half',\n",
       "       u'month_period_1', u'month_period_2', u'month_period_3',\n",
       "       u'week_period_1', u'week_period_2', u'week_period_3', u'week_period_4'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 去掉不需要的数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>record_date</th>\n",
       "      <th>power_consumption</th>\n",
       "      <th>dow</th>\n",
       "      <th>doy</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>first_half</th>\n",
       "      <th>second_half</th>\n",
       "      <th>month_period_1</th>\n",
       "      <th>month_period_2</th>\n",
       "      <th>month_period_3</th>\n",
       "      <th>week_period_1</th>\n",
       "      <th>week_period_2</th>\n",
       "      <th>week_period_3</th>\n",
       "      <th>week_period_4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>2015-03-01</td>\n",
       "      <td>2900464.0</td>\n",
       "      <td>6</td>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2015</td>\n",
       "      <td>2.795163e+06</td>\n",
       "      <td>769697.864999</td>\n",
       "      <td>-674272.145833</td>\n",
       "      <td>-1223101.62821</td>\n",
       "      <td>-342783.154545</td>\n",
       "      <td>-1352485.7</td>\n",
       "      <td>-93716.5375</td>\n",
       "      <td>-220744.014286</td>\n",
       "      <td>-739169.857143</td>\n",
       "      <td>-1042483.85714</td>\n",
       "      <td>252348.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>2015-03-02</td>\n",
       "      <td>3334082.0</td>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2015</td>\n",
       "      <td>2.795163e+06</td>\n",
       "      <td>769697.864999</td>\n",
       "      <td>-674272.145833</td>\n",
       "      <td>-1223101.62821</td>\n",
       "      <td>-342783.154545</td>\n",
       "      <td>-1352485.7</td>\n",
       "      <td>-93716.5375</td>\n",
       "      <td>-220744.014286</td>\n",
       "      <td>-739169.857143</td>\n",
       "      <td>-1042483.85714</td>\n",
       "      <td>252348.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>2015-03-03</td>\n",
       "      <td>3492606.0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2015</td>\n",
       "      <td>2.795163e+06</td>\n",
       "      <td>769697.864999</td>\n",
       "      <td>-674272.145833</td>\n",
       "      <td>-1223101.62821</td>\n",
       "      <td>-342783.154545</td>\n",
       "      <td>-1352485.7</td>\n",
       "      <td>-93716.5375</td>\n",
       "      <td>-220744.014286</td>\n",
       "      <td>-739169.857143</td>\n",
       "      <td>-1042483.85714</td>\n",
       "      <td>252348.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>2015-03-04</td>\n",
       "      <td>3597890.0</td>\n",
       "      <td>2</td>\n",
       "      <td>63</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2015</td>\n",
       "      <td>2.795163e+06</td>\n",
       "      <td>769697.864999</td>\n",
       "      <td>-674272.145833</td>\n",
       "      <td>-1223101.62821</td>\n",
       "      <td>-342783.154545</td>\n",
       "      <td>-1352485.7</td>\n",
       "      <td>-93716.5375</td>\n",
       "      <td>-220744.014286</td>\n",
       "      <td>-739169.857143</td>\n",
       "      <td>-1042483.85714</td>\n",
       "      <td>252348.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>2015-03-05</td>\n",
       "      <td>1798044.0</td>\n",
       "      <td>3</td>\n",
       "      <td>64</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>2015</td>\n",
       "      <td>2.795163e+06</td>\n",
       "      <td>769697.864999</td>\n",
       "      <td>-674272.145833</td>\n",
       "      <td>-1223101.62821</td>\n",
       "      <td>-342783.154545</td>\n",
       "      <td>-1352485.7</td>\n",
       "      <td>-93716.5375</td>\n",
       "      <td>-220744.014286</td>\n",
       "      <td>-739169.857143</td>\n",
       "      <td>-1042483.85714</td>\n",
       "      <td>252348.357143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   record_date  power_consumption  dow  doy  day  month  year          mean  \\\n",
       "59  2015-03-01          2900464.0    6   60    1      3  2015  2.795163e+06   \n",
       "60  2015-03-02          3334082.0    0   61    2      3  2015  2.795163e+06   \n",
       "61  2015-03-03          3492606.0    1   62    3      3  2015  2.795163e+06   \n",
       "62  2015-03-04          3597890.0    2   63    4      3  2015  2.795163e+06   \n",
       "63  2015-03-05          1798044.0    3   64    5      3  2015  2.795163e+06   \n",
       "\n",
       "              std      first_half     second_half  month_period_1  \\\n",
       "59  769697.864999  -674272.145833  -1223101.62821  -342783.154545   \n",
       "60  769697.864999  -674272.145833  -1223101.62821  -342783.154545   \n",
       "61  769697.864999  -674272.145833  -1223101.62821  -342783.154545   \n",
       "62  769697.864999  -674272.145833  -1223101.62821  -342783.154545   \n",
       "63  769697.864999  -674272.145833  -1223101.62821  -342783.154545   \n",
       "\n",
       "   month_period_2 month_period_3   week_period_1   week_period_2  \\\n",
       "59     -1352485.7    -93716.5375  -220744.014286  -739169.857143   \n",
       "60     -1352485.7    -93716.5375  -220744.014286  -739169.857143   \n",
       "61     -1352485.7    -93716.5375  -220744.014286  -739169.857143   \n",
       "62     -1352485.7    -93716.5375  -220744.014286  -739169.857143   \n",
       "63     -1352485.7    -93716.5375  -220744.014286  -739169.857143   \n",
       "\n",
       "     week_period_3  week_period_4  \n",
       "59  -1042483.85714  252348.357143  \n",
       "60  -1042483.85714  252348.357143  \n",
       "61  -1042483.85714  252348.357143  \n",
       "62  -1042483.85714  252348.357143  \n",
       "63  -1042483.85714  252348.357143  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final = df_final[df_final.record_date>='2015-03-01']\n",
    "# df_final['previous_2months_diff'] = df_final['1_m_mean']-df_final['2_m_mean']\n",
    "df_final.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 异常值"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# df1 = df_final[(df_final.record_date >= '2016-03-01')]#\n",
    "# df2 = df_final[(df_final.record_date < '2016-01-01')]#\n",
    "# # df_final = df_final[(df_final.record_date >= '2016-03-01')]#| (df_final.record_date < '2016-01-01')]\n",
    "# # df_final['previous_2months_diff'] = df_final['1_m_mean']-df_final['2_m_mean']\n",
    "# df_final = pd.concat([df2,df1])\n",
    "# df_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['2015-03-01T00:00:00.000000000', '2015-03-02T00:00:00.000000000',\n",
       "       '2015-03-03T00:00:00.000000000', '2015-03-04T00:00:00.000000000',\n",
       "       '2015-03-05T00:00:00.000000000', '2015-03-06T00:00:00.000000000',\n",
       "       '2015-03-07T00:00:00.000000000', '2015-03-08T00:00:00.000000000',\n",
       "       '2015-03-09T00:00:00.000000000', '2015-03-10T00:00:00.000000000',\n",
       "       '2015-03-11T00:00:00.000000000', '2015-03-12T00:00:00.000000000',\n",
       "       '2015-03-13T00:00:00.000000000', '2015-03-14T00:00:00.000000000',\n",
       "       '2015-03-15T00:00:00.000000000', '2015-03-16T00:00:00.000000000',\n",
       "       '2015-03-17T00:00:00.000000000', '2015-03-18T00:00:00.000000000',\n",
       "       '2015-03-19T00:00:00.000000000', '2015-03-20T00:00:00.000000000',\n",
       "       '2015-03-21T00:00:00.000000000', '2015-03-22T00:00:00.000000000',\n",
       "       '2015-03-23T00:00:00.000000000', '2015-03-24T00:00:00.000000000',\n",
       "       '2015-03-25T00:00:00.000000000', '2015-03-26T00:00:00.000000000',\n",
       "       '2015-03-27T00:00:00.000000000', '2015-03-28T00:00:00.000000000',\n",
       "       '2015-03-29T00:00:00.000000000', '2015-03-30T00:00:00.000000000',\n",
       "       '2015-03-31T00:00:00.000000000', '2015-04-01T00:00:00.000000000',\n",
       "       '2015-04-02T00:00:00.000000000', '2015-04-03T00:00:00.000000000',\n",
       "       '2015-04-04T00:00:00.000000000', '2015-04-05T00:00:00.000000000',\n",
       "       '2015-04-06T00:00:00.000000000', '2015-04-07T00:00:00.000000000',\n",
       "       '2015-04-08T00:00:00.000000000', '2015-04-09T00:00:00.000000000',\n",
       "       '2015-04-10T00:00:00.000000000', '2015-04-11T00:00:00.000000000',\n",
       "       '2015-04-12T00:00:00.000000000', '2015-04-13T00:00:00.000000000',\n",
       "       '2015-04-14T00:00:00.000000000', '2015-04-15T00:00:00.000000000',\n",
       "       '2015-04-16T00:00:00.000000000', '2015-04-17T00:00:00.000000000',\n",
       "       '2015-04-18T00:00:00.000000000', '2015-04-19T00:00:00.000000000',\n",
       "       '2015-04-20T00:00:00.000000000', '2015-04-21T00:00:00.000000000',\n",
       "       '2015-04-22T00:00:00.000000000', '2015-04-23T00:00:00.000000000',\n",
       "       '2015-04-24T00:00:00.000000000', '2015-04-25T00:00:00.000000000',\n",
       "       '2015-04-26T00:00:00.000000000', '2015-04-27T00:00:00.000000000',\n",
       "       '2015-04-28T00:00:00.000000000', '2015-04-29T00:00:00.000000000',\n",
       "       '2015-04-30T00:00:00.000000000', '2015-05-01T00:00:00.000000000',\n",
       "       '2015-05-02T00:00:00.000000000', '2015-05-03T00:00:00.000000000',\n",
       "       '2015-05-04T00:00:00.000000000', '2015-05-05T00:00:00.000000000',\n",
       "       '2015-05-06T00:00:00.000000000', '2015-05-07T00:00:00.000000000',\n",
       "       '2015-05-08T00:00:00.000000000', '2015-05-09T00:00:00.000000000',\n",
       "       '2015-05-10T00:00:00.000000000', '2015-05-11T00:00:00.000000000',\n",
       "       '2015-05-12T00:00:00.000000000', '2015-05-13T00:00:00.000000000',\n",
       "       '2015-05-14T00:00:00.000000000', '2015-05-15T00:00:00.000000000',\n",
       "       '2015-05-16T00:00:00.000000000', '2015-05-17T00:00:00.000000000',\n",
       "       '2015-05-18T00:00:00.000000000', '2015-05-19T00:00:00.000000000',\n",
       "       '2015-05-20T00:00:00.000000000', '2015-05-21T00:00:00.000000000',\n",
       "       '2015-05-22T00:00:00.000000000', '2015-05-23T00:00:00.000000000',\n",
       "       '2015-05-24T00:00:00.000000000', '2015-05-25T00:00:00.000000000',\n",
       "       '2015-05-26T00:00:00.000000000', '2015-05-27T00:00:00.000000000',\n",
       "       '2015-05-28T00:00:00.000000000', '2015-05-29T00:00:00.000000000',\n",
       "       '2015-05-30T00:00:00.000000000', '2015-05-31T00:00:00.000000000',\n",
       "       '2015-06-01T00:00:00.000000000', '2015-06-02T00:00:00.000000000',\n",
       "       '2015-06-03T00:00:00.000000000', '2015-06-04T00:00:00.000000000',\n",
       "       '2015-06-05T00:00:00.000000000', '2015-06-06T00:00:00.000000000',\n",
       "       '2015-06-07T00:00:00.000000000', '2015-06-08T00:00:00.000000000',\n",
       "       '2015-06-09T00:00:00.000000000', '2015-06-10T00:00:00.000000000',\n",
       "       '2015-06-11T00:00:00.000000000', '2015-06-12T00:00:00.000000000',\n",
       "       '2015-06-13T00:00:00.000000000', '2015-06-14T00:00:00.000000000',\n",
       "       '2015-06-15T00:00:00.000000000', '2015-06-16T00:00:00.000000000',\n",
       "       '2015-06-17T00:00:00.000000000', '2015-06-18T00:00:00.000000000',\n",
       "       '2015-06-19T00:00:00.000000000', '2015-06-20T00:00:00.000000000',\n",
       "       '2015-06-21T00:00:00.000000000', '2015-06-22T00:00:00.000000000',\n",
       "       '2015-06-23T00:00:00.000000000', '2015-06-24T00:00:00.000000000',\n",
       "       '2015-06-25T00:00:00.000000000', '2015-06-26T00:00:00.000000000',\n",
       "       '2015-06-27T00:00:00.000000000', '2015-06-28T00:00:00.000000000',\n",
       "       '2015-06-29T00:00:00.000000000', '2015-06-30T00:00:00.000000000',\n",
       "       '2015-07-01T00:00:00.000000000', '2015-07-02T00:00:00.000000000',\n",
       "       '2015-07-03T00:00:00.000000000', '2015-07-04T00:00:00.000000000',\n",
       "       '2015-07-05T00:00:00.000000000', '2015-07-06T00:00:00.000000000',\n",
       "       '2015-07-07T00:00:00.000000000', '2015-07-08T00:00:00.000000000',\n",
       "       '2015-07-09T00:00:00.000000000', '2015-07-10T00:00:00.000000000',\n",
       "       '2015-07-11T00:00:00.000000000', '2015-07-12T00:00:00.000000000',\n",
       "       '2015-07-13T00:00:00.000000000', '2015-07-14T00:00:00.000000000',\n",
       "       '2015-07-15T00:00:00.000000000', '2015-07-16T00:00:00.000000000',\n",
       "       '2015-07-17T00:00:00.000000000', '2015-07-18T00:00:00.000000000',\n",
       "       '2015-07-19T00:00:00.000000000', '2015-07-20T00:00:00.000000000',\n",
       "       '2015-07-21T00:00:00.000000000', '2015-07-22T00:00:00.000000000',\n",
       "       '2015-07-23T00:00:00.000000000', '2015-07-24T00:00:00.000000000',\n",
       "       '2015-07-25T00:00:00.000000000', '2015-07-26T00:00:00.000000000',\n",
       "       '2015-07-27T00:00:00.000000000', '2015-07-28T00:00:00.000000000',\n",
       "       '2015-07-29T00:00:00.000000000', '2015-07-30T00:00:00.000000000',\n",
       "       '2015-07-31T00:00:00.000000000', '2015-08-01T00:00:00.000000000',\n",
       "       '2015-08-02T00:00:00.000000000', '2015-08-03T00:00:00.000000000',\n",
       "       '2015-08-04T00:00:00.000000000', '2015-08-05T00:00:00.000000000',\n",
       "       '2015-08-06T00:00:00.000000000', '2015-08-07T00:00:00.000000000',\n",
       "       '2015-08-08T00:00:00.000000000', '2015-08-09T00:00:00.000000000',\n",
       "       '2015-08-10T00:00:00.000000000', '2015-08-11T00:00:00.000000000',\n",
       "       '2015-08-12T00:00:00.000000000', '2015-08-13T00:00:00.000000000',\n",
       "       '2015-08-14T00:00:00.000000000', '2015-08-15T00:00:00.000000000',\n",
       "       '2015-08-16T00:00:00.000000000', '2015-08-17T00:00:00.000000000',\n",
       "       '2015-08-18T00:00:00.000000000', '2015-08-19T00:00:00.000000000',\n",
       "       '2015-08-20T00:00:00.000000000', '2015-08-21T00:00:00.000000000',\n",
       "       '2015-08-22T00:00:00.000000000', '2015-08-23T00:00:00.000000000',\n",
       "       '2015-08-24T00:00:00.000000000', '2015-08-25T00:00:00.000000000',\n",
       "       '2015-08-26T00:00:00.000000000', '2015-08-27T00:00:00.000000000',\n",
       "       '2015-08-28T00:00:00.000000000', '2015-08-29T00:00:00.000000000',\n",
       "       '2015-08-30T00:00:00.000000000', '2015-08-31T00:00:00.000000000',\n",
       "       '2015-09-01T00:00:00.000000000', '2015-09-02T00:00:00.000000000',\n",
       "       '2015-09-03T00:00:00.000000000', '2015-09-04T00:00:00.000000000',\n",
       "       '2015-09-05T00:00:00.000000000', '2015-09-06T00:00:00.000000000',\n",
       "       '2015-09-07T00:00:00.000000000', '2015-09-08T00:00:00.000000000',\n",
       "       '2015-09-09T00:00:00.000000000', '2015-09-10T00:00:00.000000000',\n",
       "       '2015-09-11T00:00:00.000000000', '2015-09-12T00:00:00.000000000',\n",
       "       '2015-09-13T00:00:00.000000000', '2015-09-14T00:00:00.000000000',\n",
       "       '2015-09-15T00:00:00.000000000', '2015-09-16T00:00:00.000000000',\n",
       "       '2015-09-17T00:00:00.000000000', '2015-09-18T00:00:00.000000000',\n",
       "       '2015-09-19T00:00:00.000000000', '2015-09-20T00:00:00.000000000',\n",
       "       '2015-09-21T00:00:00.000000000', '2015-09-22T00:00:00.000000000',\n",
       "       '2015-09-23T00:00:00.000000000', '2015-09-24T00:00:00.000000000',\n",
       "       '2015-09-25T00:00:00.000000000', '2015-09-26T00:00:00.000000000',\n",
       "       '2015-09-27T00:00:00.000000000', '2015-09-28T00:00:00.000000000',\n",
       "       '2015-09-29T00:00:00.000000000', '2015-09-30T00:00:00.000000000',\n",
       "       '2015-10-01T00:00:00.000000000', '2015-10-02T00:00:00.000000000',\n",
       "       '2015-10-03T00:00:00.000000000', '2015-10-04T00:00:00.000000000',\n",
       "       '2015-10-05T00:00:00.000000000', '2015-10-06T00:00:00.000000000',\n",
       "       '2015-10-07T00:00:00.000000000', '2015-10-08T00:00:00.000000000',\n",
       "       '2015-10-09T00:00:00.000000000', '2015-10-10T00:00:00.000000000',\n",
       "       '2015-10-11T00:00:00.000000000', '2015-10-12T00:00:00.000000000',\n",
       "       '2015-10-13T00:00:00.000000000', '2015-10-14T00:00:00.000000000',\n",
       "       '2015-10-15T00:00:00.000000000', '2015-10-16T00:00:00.000000000',\n",
       "       '2015-10-17T00:00:00.000000000', '2015-10-18T00:00:00.000000000',\n",
       "       '2015-10-19T00:00:00.000000000', '2015-10-20T00:00:00.000000000',\n",
       "       '2015-10-21T00:00:00.000000000', '2015-10-22T00:00:00.000000000',\n",
       "       '2015-10-23T00:00:00.000000000', '2015-10-24T00:00:00.000000000',\n",
       "       '2015-10-25T00:00:00.000000000', '2015-10-26T00:00:00.000000000',\n",
       "       '2015-10-27T00:00:00.000000000', '2015-10-28T00:00:00.000000000',\n",
       "       '2015-10-29T00:00:00.000000000', '2015-10-30T00:00:00.000000000',\n",
       "       '2015-10-31T00:00:00.000000000', '2015-11-01T00:00:00.000000000',\n",
       "       '2015-11-02T00:00:00.000000000', '2015-11-03T00:00:00.000000000',\n",
       "       '2015-11-04T00:00:00.000000000', '2015-11-05T00:00:00.000000000',\n",
       "       '2015-11-06T00:00:00.000000000', '2015-11-07T00:00:00.000000000',\n",
       "       '2015-11-08T00:00:00.000000000', '2015-11-09T00:00:00.000000000',\n",
       "       '2015-11-10T00:00:00.000000000', '2015-11-11T00:00:00.000000000',\n",
       "       '2015-11-12T00:00:00.000000000', '2015-11-13T00:00:00.000000000',\n",
       "       '2015-11-14T00:00:00.000000000', '2015-11-15T00:00:00.000000000',\n",
       "       '2015-11-16T00:00:00.000000000', '2015-11-17T00:00:00.000000000',\n",
       "       '2015-11-18T00:00:00.000000000', '2015-11-19T00:00:00.000000000',\n",
       "       '2015-11-20T00:00:00.000000000', '2015-11-21T00:00:00.000000000',\n",
       "       '2015-11-22T00:00:00.000000000', '2015-11-23T00:00:00.000000000',\n",
       "       '2015-11-24T00:00:00.000000000', '2015-11-25T00:00:00.000000000',\n",
       "       '2015-11-26T00:00:00.000000000', '2015-11-27T00:00:00.000000000',\n",
       "       '2015-11-28T00:00:00.000000000', '2015-11-29T00:00:00.000000000',\n",
       "       '2015-11-30T00:00:00.000000000', '2015-12-01T00:00:00.000000000',\n",
       "       '2015-12-02T00:00:00.000000000', '2015-12-03T00:00:00.000000000',\n",
       "       '2015-12-04T00:00:00.000000000', '2015-12-05T00:00:00.000000000',\n",
       "       '2015-12-06T00:00:00.000000000', '2015-12-07T00:00:00.000000000',\n",
       "       '2015-12-08T00:00:00.000000000', '2015-12-09T00:00:00.000000000',\n",
       "       '2015-12-10T00:00:00.000000000', '2015-12-11T00:00:00.000000000',\n",
       "       '2015-12-12T00:00:00.000000000', '2015-12-13T00:00:00.000000000',\n",
       "       '2015-12-14T00:00:00.000000000', '2015-12-15T00:00:00.000000000',\n",
       "       '2015-12-16T00:00:00.000000000', '2015-12-17T00:00:00.000000000',\n",
       "       '2015-12-18T00:00:00.000000000', '2015-12-19T00:00:00.000000000',\n",
       "       '2015-12-20T00:00:00.000000000', '2015-12-21T00:00:00.000000000',\n",
       "       '2015-12-22T00:00:00.000000000', '2015-12-23T00:00:00.000000000',\n",
       "       '2015-12-24T00:00:00.000000000', '2015-12-25T00:00:00.000000000',\n",
       "       '2015-12-26T00:00:00.000000000', '2015-12-27T00:00:00.000000000',\n",
       "       '2015-12-28T00:00:00.000000000', '2015-12-29T00:00:00.000000000',\n",
       "       '2015-12-30T00:00:00.000000000', '2015-12-31T00:00:00.000000000',\n",
       "       '2016-01-01T00:00:00.000000000', '2016-01-02T00:00:00.000000000',\n",
       "       '2016-01-03T00:00:00.000000000', '2016-01-04T00:00:00.000000000',\n",
       "       '2016-01-05T00:00:00.000000000', '2016-01-06T00:00:00.000000000',\n",
       "       '2016-01-07T00:00:00.000000000', '2016-01-08T00:00:00.000000000',\n",
       "       '2016-01-09T00:00:00.000000000', '2016-01-10T00:00:00.000000000',\n",
       "       '2016-01-11T00:00:00.000000000', '2016-01-12T00:00:00.000000000',\n",
       "       '2016-01-13T00:00:00.000000000', '2016-01-14T00:00:00.000000000',\n",
       "       '2016-01-15T00:00:00.000000000', '2016-01-16T00:00:00.000000000',\n",
       "       '2016-01-17T00:00:00.000000000', '2016-01-18T00:00:00.000000000',\n",
       "       '2016-01-19T00:00:00.000000000', '2016-01-20T00:00:00.000000000',\n",
       "       '2016-01-21T00:00:00.000000000', '2016-01-22T00:00:00.000000000',\n",
       "       '2016-01-23T00:00:00.000000000', '2016-01-24T00:00:00.000000000',\n",
       "       '2016-01-25T00:00:00.000000000', '2016-01-26T00:00:00.000000000',\n",
       "       '2016-01-27T00:00:00.000000000', '2016-01-28T00:00:00.000000000',\n",
       "       '2016-01-29T00:00:00.000000000', '2016-01-30T00:00:00.000000000',\n",
       "       '2016-01-31T00:00:00.000000000', '2016-02-01T00:00:00.000000000',\n",
       "       '2016-02-02T00:00:00.000000000', '2016-02-03T00:00:00.000000000',\n",
       "       '2016-02-04T00:00:00.000000000', '2016-02-05T00:00:00.000000000',\n",
       "       '2016-02-06T00:00:00.000000000', '2016-02-07T00:00:00.000000000',\n",
       "       '2016-02-08T00:00:00.000000000', '2016-02-09T00:00:00.000000000',\n",
       "       '2016-02-10T00:00:00.000000000', '2016-02-11T00:00:00.000000000',\n",
       "       '2016-02-12T00:00:00.000000000', '2016-02-13T00:00:00.000000000',\n",
       "       '2016-02-14T00:00:00.000000000', '2016-02-15T00:00:00.000000000',\n",
       "       '2016-02-16T00:00:00.000000000', '2016-02-17T00:00:00.000000000',\n",
       "       '2016-02-18T00:00:00.000000000', '2016-02-19T00:00:00.000000000',\n",
       "       '2016-02-20T00:00:00.000000000', '2016-02-21T00:00:00.000000000',\n",
       "       '2016-02-22T00:00:00.000000000', '2016-02-23T00:00:00.000000000',\n",
       "       '2016-02-24T00:00:00.000000000', '2016-02-25T00:00:00.000000000',\n",
       "       '2016-02-26T00:00:00.000000000', '2016-02-27T00:00:00.000000000',\n",
       "       '2016-02-28T00:00:00.000000000', '2016-02-29T00:00:00.000000000',\n",
       "       '2016-03-01T00:00:00.000000000', '2016-03-02T00:00:00.000000000',\n",
       "       '2016-03-03T00:00:00.000000000', '2016-03-04T00:00:00.000000000',\n",
       "       '2016-03-05T00:00:00.000000000', '2016-03-06T00:00:00.000000000',\n",
       "       '2016-03-07T00:00:00.000000000', '2016-03-08T00:00:00.000000000',\n",
       "       '2016-03-09T00:00:00.000000000', '2016-03-10T00:00:00.000000000',\n",
       "       '2016-03-11T00:00:00.000000000', '2016-03-12T00:00:00.000000000',\n",
       "       '2016-03-13T00:00:00.000000000', '2016-03-14T00:00:00.000000000',\n",
       "       '2016-03-15T00:00:00.000000000', '2016-03-16T00:00:00.000000000',\n",
       "       '2016-03-17T00:00:00.000000000', '2016-03-18T00:00:00.000000000',\n",
       "       '2016-03-19T00:00:00.000000000', '2016-03-20T00:00:00.000000000',\n",
       "       '2016-03-21T00:00:00.000000000', '2016-03-22T00:00:00.000000000',\n",
       "       '2016-03-23T00:00:00.000000000', '2016-03-24T00:00:00.000000000',\n",
       "       '2016-03-25T00:00:00.000000000', '2016-03-26T00:00:00.000000000',\n",
       "       '2016-03-27T00:00:00.000000000', '2016-03-28T00:00:00.000000000',\n",
       "       '2016-03-29T00:00:00.000000000', '2016-03-30T00:00:00.000000000',\n",
       "       '2016-03-31T00:00:00.000000000', '2016-04-01T00:00:00.000000000',\n",
       "       '2016-04-02T00:00:00.000000000', '2016-04-03T00:00:00.000000000',\n",
       "       '2016-04-04T00:00:00.000000000', '2016-04-05T00:00:00.000000000',\n",
       "       '2016-04-06T00:00:00.000000000', '2016-04-07T00:00:00.000000000',\n",
       "       '2016-04-08T00:00:00.000000000', '2016-04-09T00:00:00.000000000',\n",
       "       '2016-04-10T00:00:00.000000000', '2016-04-11T00:00:00.000000000',\n",
       "       '2016-04-12T00:00:00.000000000', '2016-04-13T00:00:00.000000000',\n",
       "       '2016-04-14T00:00:00.000000000', '2016-04-15T00:00:00.000000000',\n",
       "       '2016-04-16T00:00:00.000000000', '2016-04-17T00:00:00.000000000',\n",
       "       '2016-04-18T00:00:00.000000000', '2016-04-19T00:00:00.000000000',\n",
       "       '2016-04-20T00:00:00.000000000', '2016-04-21T00:00:00.000000000',\n",
       "       '2016-04-22T00:00:00.000000000', '2016-04-23T00:00:00.000000000',\n",
       "       '2016-04-24T00:00:00.000000000', '2016-04-25T00:00:00.000000000',\n",
       "       '2016-04-26T00:00:00.000000000', '2016-04-27T00:00:00.000000000',\n",
       "       '2016-04-28T00:00:00.000000000', '2016-04-29T00:00:00.000000000',\n",
       "       '2016-04-30T00:00:00.000000000', '2016-05-01T00:00:00.000000000',\n",
       "       '2016-05-02T00:00:00.000000000', '2016-05-03T00:00:00.000000000',\n",
       "       '2016-05-04T00:00:00.000000000', '2016-05-05T00:00:00.000000000',\n",
       "       '2016-05-06T00:00:00.000000000', '2016-05-07T00:00:00.000000000',\n",
       "       '2016-05-08T00:00:00.000000000', '2016-05-09T00:00:00.000000000',\n",
       "       '2016-05-10T00:00:00.000000000', '2016-05-11T00:00:00.000000000',\n",
       "       '2016-05-12T00:00:00.000000000', '2016-05-13T00:00:00.000000000',\n",
       "       '2016-05-14T00:00:00.000000000', '2016-05-15T00:00:00.000000000',\n",
       "       '2016-05-16T00:00:00.000000000', '2016-05-17T00:00:00.000000000',\n",
       "       '2016-05-18T00:00:00.000000000', '2016-05-19T00:00:00.000000000',\n",
       "       '2016-05-20T00:00:00.000000000', '2016-05-21T00:00:00.000000000',\n",
       "       '2016-05-22T00:00:00.000000000', '2016-05-23T00:00:00.000000000',\n",
       "       '2016-05-24T00:00:00.000000000', '2016-05-25T00:00:00.000000000',\n",
       "       '2016-05-26T00:00:00.000000000', '2016-05-27T00:00:00.000000000',\n",
       "       '2016-05-28T00:00:00.000000000', '2016-05-29T00:00:00.000000000',\n",
       "       '2016-05-30T00:00:00.000000000', '2016-05-31T00:00:00.000000000',\n",
       "       '2016-06-01T00:00:00.000000000', '2016-06-02T00:00:00.000000000',\n",
       "       '2016-06-03T00:00:00.000000000', '2016-06-04T00:00:00.000000000',\n",
       "       '2016-06-05T00:00:00.000000000', '2016-06-06T00:00:00.000000000',\n",
       "       '2016-06-07T00:00:00.000000000', '2016-06-08T00:00:00.000000000',\n",
       "       '2016-06-09T00:00:00.000000000', '2016-06-10T00:00:00.000000000',\n",
       "       '2016-06-11T00:00:00.000000000', '2016-06-12T00:00:00.000000000',\n",
       "       '2016-06-13T00:00:00.000000000', '2016-06-14T00:00:00.000000000',\n",
       "       '2016-06-15T00:00:00.000000000', '2016-06-16T00:00:00.000000000',\n",
       "       '2016-06-17T00:00:00.000000000', '2016-06-18T00:00:00.000000000',\n",
       "       '2016-06-19T00:00:00.000000000', '2016-06-20T00:00:00.000000000',\n",
       "       '2016-06-21T00:00:00.000000000', '2016-06-22T00:00:00.000000000',\n",
       "       '2016-06-23T00:00:00.000000000', '2016-06-24T00:00:00.000000000',\n",
       "       '2016-06-25T00:00:00.000000000', '2016-06-26T00:00:00.000000000',\n",
       "       '2016-06-27T00:00:00.000000000', '2016-06-28T00:00:00.000000000',\n",
       "       '2016-06-29T00:00:00.000000000', '2016-06-30T00:00:00.000000000',\n",
       "       '2016-07-01T00:00:00.000000000', '2016-07-02T00:00:00.000000000',\n",
       "       '2016-07-03T00:00:00.000000000', '2016-07-04T00:00:00.000000000',\n",
       "       '2016-07-05T00:00:00.000000000', '2016-07-06T00:00:00.000000000',\n",
       "       '2016-07-07T00:00:00.000000000', '2016-07-08T00:00:00.000000000',\n",
       "       '2016-07-09T00:00:00.000000000', '2016-07-10T00:00:00.000000000',\n",
       "       '2016-07-11T00:00:00.000000000', '2016-07-12T00:00:00.000000000',\n",
       "       '2016-07-13T00:00:00.000000000', '2016-07-14T00:00:00.000000000',\n",
       "       '2016-07-15T00:00:00.000000000', '2016-07-16T00:00:00.000000000',\n",
       "       '2016-07-17T00:00:00.000000000', '2016-07-18T00:00:00.000000000',\n",
       "       '2016-07-19T00:00:00.000000000', '2016-07-20T00:00:00.000000000',\n",
       "       '2016-07-21T00:00:00.000000000', '2016-07-22T00:00:00.000000000',\n",
       "       '2016-07-23T00:00:00.000000000', '2016-07-24T00:00:00.000000000',\n",
       "       '2016-07-25T00:00:00.000000000', '2016-07-26T00:00:00.000000000',\n",
       "       '2016-07-27T00:00:00.000000000', '2016-07-28T00:00:00.000000000',\n",
       "       '2016-07-29T00:00:00.000000000', '2016-07-30T00:00:00.000000000',\n",
       "       '2016-07-31T00:00:00.000000000', '2016-08-01T00:00:00.000000000',\n",
       "       '2016-08-02T00:00:00.000000000', '2016-08-03T00:00:00.000000000',\n",
       "       '2016-08-04T00:00:00.000000000', '2016-08-05T00:00:00.000000000',\n",
       "       '2016-08-06T00:00:00.000000000', '2016-08-07T00:00:00.000000000',\n",
       "       '2016-08-08T00:00:00.000000000', '2016-08-09T00:00:00.000000000',\n",
       "       '2016-08-10T00:00:00.000000000', '2016-08-11T00:00:00.000000000',\n",
       "       '2016-08-12T00:00:00.000000000', '2016-08-13T00:00:00.000000000',\n",
       "       '2016-08-14T00:00:00.000000000', '2016-08-15T00:00:00.000000000',\n",
       "       '2016-08-16T00:00:00.000000000', '2016-08-17T00:00:00.000000000',\n",
       "       '2016-08-18T00:00:00.000000000', '2016-08-19T00:00:00.000000000',\n",
       "       '2016-08-20T00:00:00.000000000', '2016-08-21T00:00:00.000000000',\n",
       "       '2016-08-22T00:00:00.000000000', '2016-08-23T00:00:00.000000000',\n",
       "       '2016-08-24T00:00:00.000000000', '2016-08-25T00:00:00.000000000',\n",
       "       '2016-08-26T00:00:00.000000000', '2016-08-27T00:00:00.000000000',\n",
       "       '2016-08-28T00:00:00.000000000', '2016-08-29T00:00:00.000000000',\n",
       "       '2016-08-30T00:00:00.000000000', '2016-08-31T00:00:00.000000000',\n",
       "       '2016-09-01T00:00:00.000000000', '2016-09-02T00:00:00.000000000',\n",
       "       '2016-09-03T00:00:00.000000000', '2016-09-04T00:00:00.000000000',\n",
       "       '2016-09-05T00:00:00.000000000', '2016-09-06T00:00:00.000000000',\n",
       "       '2016-09-07T00:00:00.000000000', '2016-09-08T00:00:00.000000000',\n",
       "       '2016-09-09T00:00:00.000000000', '2016-09-10T00:00:00.000000000',\n",
       "       '2016-09-11T00:00:00.000000000', '2016-09-12T00:00:00.000000000',\n",
       "       '2016-09-13T00:00:00.000000000', '2016-09-14T00:00:00.000000000',\n",
       "       '2016-09-15T00:00:00.000000000', '2016-09-16T00:00:00.000000000',\n",
       "       '2016-09-17T00:00:00.000000000', '2016-09-18T00:00:00.000000000',\n",
       "       '2016-09-19T00:00:00.000000000', '2016-09-20T00:00:00.000000000',\n",
       "       '2016-09-21T00:00:00.000000000', '2016-09-22T00:00:00.000000000',\n",
       "       '2016-09-23T00:00:00.000000000', '2016-09-24T00:00:00.000000000',\n",
       "       '2016-09-25T00:00:00.000000000', '2016-09-26T00:00:00.000000000',\n",
       "       '2016-09-27T00:00:00.000000000', '2016-09-28T00:00:00.000000000',\n",
       "       '2016-09-29T00:00:00.000000000', '2016-09-30T00:00:00.000000000'], dtype='datetime64[ns]')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## \n",
    "df_final.record_date.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 保存测试集"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df_final = df_final.drop(['record_date'],1)\n",
    "df_final.to_csv('train.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2900464.0\n",
      "['6.0' '60.0' '1.0' '3.0' '2015.0' 2795163.05357 769697.864999\n",
      " -674272.145833 -1223101.62821 -342783.154545 -1352485.7 -93716.5375\n",
      " -220744.01428600002 -739169.857143 -1042483.85714 252348.35714299997]\n",
      "Start training...\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>power_consumption</th>\n",
       "      <th>dow</th>\n",
       "      <th>doy</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>first_half</th>\n",
       "      <th>second_half</th>\n",
       "      <th>month_period_1</th>\n",
       "      <th>month_period_2</th>\n",
       "      <th>month_period_3</th>\n",
       "      <th>week_period_1</th>\n",
       "      <th>week_period_2</th>\n",
       "      <th>week_period_3</th>\n",
       "      <th>week_period_4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2900464.0</td>\n",
       "      <td>6</td>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2015</td>\n",
       "      <td>2.795163e+06</td>\n",
       "      <td>769697.864999</td>\n",
       "      <td>-674272.145833</td>\n",
       "      <td>-1.223102e+06</td>\n",
       "      <td>-342783.154545</td>\n",
       "      <td>-1352485.7</td>\n",
       "      <td>-93716.5375</td>\n",
       "      <td>-220744.014286</td>\n",
       "      <td>-739169.857143</td>\n",
       "      <td>-1.042484e+06</td>\n",
       "      <td>252348.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3334082.0</td>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2015</td>\n",
       "      <td>2.795163e+06</td>\n",
       "      <td>769697.864999</td>\n",
       "      <td>-674272.145833</td>\n",
       "      <td>-1.223102e+06</td>\n",
       "      <td>-342783.154545</td>\n",
       "      <td>-1352485.7</td>\n",
       "      <td>-93716.5375</td>\n",
       "      <td>-220744.014286</td>\n",
       "      <td>-739169.857143</td>\n",
       "      <td>-1.042484e+06</td>\n",
       "      <td>252348.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3492606.0</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2015</td>\n",
       "      <td>2.795163e+06</td>\n",
       "      <td>769697.864999</td>\n",
       "      <td>-674272.145833</td>\n",
       "      <td>-1.223102e+06</td>\n",
       "      <td>-342783.154545</td>\n",
       "      <td>-1352485.7</td>\n",
       "      <td>-93716.5375</td>\n",
       "      <td>-220744.014286</td>\n",
       "      <td>-739169.857143</td>\n",
       "      <td>-1.042484e+06</td>\n",
       "      <td>252348.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3597890.0</td>\n",
       "      <td>2</td>\n",
       "      <td>63</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2015</td>\n",
       "      <td>2.795163e+06</td>\n",
       "      <td>769697.864999</td>\n",
       "      <td>-674272.145833</td>\n",
       "      <td>-1.223102e+06</td>\n",
       "      <td>-342783.154545</td>\n",
       "      <td>-1352485.7</td>\n",
       "      <td>-93716.5375</td>\n",
       "      <td>-220744.014286</td>\n",
       "      <td>-739169.857143</td>\n",
       "      <td>-1.042484e+06</td>\n",
       "      <td>252348.357143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1798044.0</td>\n",
       "      <td>3</td>\n",
       "      <td>64</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>2015</td>\n",
       "      <td>2.795163e+06</td>\n",
       "      <td>769697.864999</td>\n",
       "      <td>-674272.145833</td>\n",
       "      <td>-1.223102e+06</td>\n",
       "      <td>-342783.154545</td>\n",
       "      <td>-1352485.7</td>\n",
       "      <td>-93716.5375</td>\n",
       "      <td>-220744.014286</td>\n",
       "      <td>-739169.857143</td>\n",
       "      <td>-1.042484e+06</td>\n",
       "      <td>252348.357143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   power_consumption  dow  doy  day  month  year          mean            std  \\\n",
       "0          2900464.0    6   60    1      3  2015  2.795163e+06  769697.864999   \n",
       "1          3334082.0    0   61    2      3  2015  2.795163e+06  769697.864999   \n",
       "2          3492606.0    1   62    3      3  2015  2.795163e+06  769697.864999   \n",
       "3          3597890.0    2   63    4      3  2015  2.795163e+06  769697.864999   \n",
       "4          1798044.0    3   64    5      3  2015  2.795163e+06  769697.864999   \n",
       "\n",
       "      first_half   second_half  month_period_1  month_period_2  \\\n",
       "0 -674272.145833 -1.223102e+06  -342783.154545      -1352485.7   \n",
       "1 -674272.145833 -1.223102e+06  -342783.154545      -1352485.7   \n",
       "2 -674272.145833 -1.223102e+06  -342783.154545      -1352485.7   \n",
       "3 -674272.145833 -1.223102e+06  -342783.154545      -1352485.7   \n",
       "4 -674272.145833 -1.223102e+06  -342783.154545      -1352485.7   \n",
       "\n",
       "   month_period_3  week_period_1  week_period_2  week_period_3  week_period_4  \n",
       "0     -93716.5375 -220744.014286 -739169.857143  -1.042484e+06  252348.357143  \n",
       "1     -93716.5375 -220744.014286 -739169.857143  -1.042484e+06  252348.357143  \n",
       "2     -93716.5375 -220744.014286 -739169.857143  -1.042484e+06  252348.357143  \n",
       "3     -93716.5375 -220744.014286 -739169.857143  -1.042484e+06  252348.357143  \n",
       "4     -93716.5375 -220744.014286 -739169.857143  -1.042484e+06  252348.357143  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "### 生成训练集和测试集\n",
    "\n",
    "import pandas as pd\n",
    "df_final = pd.read_csv('train.csv')\n",
    "\n",
    "# df_final = df_final.drop('record_date',1)\n",
    "\n",
    "final_train_data = df_final[~((df_final.year==2016)&(df_final.month==9))].drop(['power_consumption'],1)\n",
    "final_train_data = final_train_data.astype(float)\n",
    "final_test_data = df_final[((df_final.year==2016)&(df_final.month==9))].drop(['power_consumption'],1)\n",
    "final_test_data = final_test_data.astype(float)\n",
    "train_target = df_final[~((df_final.year==2016)&(df_final.month==9))][['power_consumption']]\n",
    "\n",
    "train_lgb = final_train_data.copy()\n",
    "train_lgb[['dow','doy','day','month','year']] = train_lgb[['dow','doy','day','month','year']]\\\n",
    ".astype(str)\n",
    "test_lgb = final_test_data.copy()\n",
    "test_lgb[['dow','doy','day','month','year']] = test_lgb[['dow','doy','day','month','year',]]\\\n",
    ".astype(str)\n",
    "\n",
    "X_lgb = train_lgb.values\n",
    "y_lgb = train_target.values.reshape(train_target.values.shape[0],)\n",
    "print y_lgb[0]\n",
    "print X_lgb[0,:]\n",
    "\n",
    "#随机敲定一组参数跑模型\n",
    "import lightgbm as lgb\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "# create dataset for lightgbm\n",
    "lgb_train = lgb.Dataset(X_lgb, y_lgb)\n",
    "# specify your configurations as a dict\n",
    "params = {\n",
    "    'num_leaves': 1024,\n",
    "    'learning_rate':0.42,\n",
    "    'n_estimators':30,\n",
    "    'feature_fraction': 1,\n",
    "    'bagging_fraction': 0.8,\n",
    "    'bagging_freq': 5\n",
    "}\n",
    "\n",
    "print('Start training...')\n",
    "# train\n",
    "\n",
    "evals_result = {}  # to record eval results for plotting\n",
    "\n",
    "gbm = lgb.train(params,\n",
    "                lgb_train,\n",
    "                num_boost_round=30,\n",
    "                feature_name=list(final_train_data.columns))\n",
    "\n",
    "\n",
    "# gbm = lgb.train(params,\n",
    "#                 lgb_train,\n",
    "#                 num_boost_round=30,\n",
    "# #                 valid_sets=[lgb_train, lgb_test],\n",
    "#                 feature_name=list(final_train_data.columns)),\n",
    "# #                 categorical_feature=[21],\n",
    "#                 evals_result=evals_result,\n",
    "# #                 verbose_eval=10\n",
    "#         )\n",
    "df_final.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 特征重要度排序"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# %matplotlib inline\n",
    "# import matplotlib.pyplot as plt\n",
    "# print('Plot feature importances...')\n",
    "# ax = lgb.plot_importance(gbm, max_num_features=10)\n",
    "# plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>predict_date</th>\n",
       "      <th>predict_power_consumption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016-09-01</td>\n",
       "      <td>3638640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016-09-02</td>\n",
       "      <td>3557499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016-09-03</td>\n",
       "      <td>3471425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016-09-04</td>\n",
       "      <td>3471425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2016-09-05</td>\n",
       "      <td>3638640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2016-09-06</td>\n",
       "      <td>3638640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2016-09-07</td>\n",
       "      <td>3638640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>3711245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>3630104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2016-09-10</td>\n",
       "      <td>3654846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2016-09-11</td>\n",
       "      <td>3654846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2016-09-12</td>\n",
       "      <td>3822061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2016-09-13</td>\n",
       "      <td>3857213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2016-09-14</td>\n",
       "      <td>3926914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2016-09-15</td>\n",
       "      <td>3961120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2016-09-16</td>\n",
       "      <td>3879979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2016-09-17</td>\n",
       "      <td>3772633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2016-09-18</td>\n",
       "      <td>3772633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2016-09-19</td>\n",
       "      <td>3939847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2016-09-20</td>\n",
       "      <td>3939847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2016-09-21</td>\n",
       "      <td>3984296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2016-09-22</td>\n",
       "      <td>4013991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2016-09-23</td>\n",
       "      <td>3932850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2016-09-24</td>\n",
       "      <td>3802328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2016-09-25</td>\n",
       "      <td>3802328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2016-09-26</td>\n",
       "      <td>4013991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2016-09-27</td>\n",
       "      <td>4013991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2016-09-28</td>\n",
       "      <td>4013991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2016-09-29</td>\n",
       "      <td>4013991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>2016-09-30</td>\n",
       "      <td>3932850</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   predict_date  predict_power_consumption\n",
       "0    2016-09-01                    3638640\n",
       "1    2016-09-02                    3557499\n",
       "2    2016-09-03                    3471425\n",
       "3    2016-09-04                    3471425\n",
       "4    2016-09-05                    3638640\n",
       "5    2016-09-06                    3638640\n",
       "6    2016-09-07                    3638640\n",
       "7    2016-09-08                    3711245\n",
       "8    2016-09-09                    3630104\n",
       "9    2016-09-10                    3654846\n",
       "10   2016-09-11                    3654846\n",
       "11   2016-09-12                    3822061\n",
       "12   2016-09-13                    3857213\n",
       "13   2016-09-14                    3926914\n",
       "14   2016-09-15                    3961120\n",
       "15   2016-09-16                    3879979\n",
       "16   2016-09-17                    3772633\n",
       "17   2016-09-18                    3772633\n",
       "18   2016-09-19                    3939847\n",
       "19   2016-09-20                    3939847\n",
       "20   2016-09-21                    3984296\n",
       "21   2016-09-22                    4013991\n",
       "22   2016-09-23                    3932850\n",
       "23   2016-09-24                    3802328\n",
       "24   2016-09-25                    3802328\n",
       "25   2016-09-26                    4013991\n",
       "26   2016-09-27                    4013991\n",
       "27   2016-09-28                    4013991\n",
       "28   2016-09-29                    4013991\n",
       "29   2016-09-30                    3932850"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "commit_df = pd.date_range('2016/9/1', periods=30, freq='D')\n",
    "commit_df = pd.DataFrame(commit_df)\n",
    "commit_df.columns = ['predict_date']\n",
    "y_predict = gbm.predict(test_lgb.values)\n",
    "commit_df['predict_power_consumption'] = pd.DataFrame(y_predict).astype('int')\n",
    "commit_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# 生成提交结果文件\n",
    "# 转换日期格式 \n",
    "\n",
    "from datetime import datetime \n",
    "\n",
    "def timetransform(t):\n",
    "    t = str(t)[0:10]\n",
    "    time = datetime.strptime(t, '%Y-%m-%d')\n",
    "    res = time.strftime('%Y%m%d')\n",
    "    return res\n",
    "\n",
    "commit_df['predict_date'] = commit_df['predict_date'].apply(timetransform)\n",
    "\n",
    "commit_df.head()\n",
    "commit_df.to_csv('Tianchi_power_predict_table.csv',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# 读入最好的成绩 做参考\n",
    "ref = pd.read_csv('predict_ref0529.csv')\n",
    "# test_x = pd.read_csv('test.csv')\n",
    "# train_y = train['power_consumption']\n",
    "# train_X = train.drop('power_consumption',axis=1)\n",
    "# train_X.shape\n",
    "# ref"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# 读取当前预测结果\n",
    "cur = pd.read_csv('Tianchi_power_predict_table.csv')\n",
    "# test_x = pd.read_csv('test.csv')\n",
    "# train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7ff7f45fdf50>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff805f65590>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y2 = cur['predict_power_consumption'].values\n",
    "x = cur['predict_date'].values\n",
    "y = ref['predict_power_consumption'].values\n",
    "\n",
    "plt.plot(x, y)\n",
    "plt.plot(x,y2)\n",
    "plt.legend(['ref','cur'],loc = 0, ncol = 2)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# 尝试不同模型"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>predict_date</th>\n",
       "      <th>predict_power_consumption</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016-09-01</td>\n",
       "      <td>3638640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2016-09-02</td>\n",
       "      <td>3557499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2016-09-03</td>\n",
       "      <td>3471425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016-09-04</td>\n",
       "      <td>3471425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2016-09-05</td>\n",
       "      <td>3638640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2016-09-06</td>\n",
       "      <td>3638640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2016-09-07</td>\n",
       "      <td>3638640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>3711245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>3630104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2016-09-10</td>\n",
       "      <td>3654846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2016-09-11</td>\n",
       "      <td>3654846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2016-09-12</td>\n",
       "      <td>3822061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2016-09-13</td>\n",
       "      <td>3857213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2016-09-14</td>\n",
       "      <td>3926914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2016-09-15</td>\n",
       "      <td>3961120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2016-09-16</td>\n",
       "      <td>3879979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2016-09-17</td>\n",
       "      <td>3772633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2016-09-18</td>\n",
       "      <td>3772633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2016-09-19</td>\n",
       "      <td>3939847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2016-09-20</td>\n",
       "      <td>3939847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2016-09-21</td>\n",
       "      <td>3984296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2016-09-22</td>\n",
       "      <td>4013991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2016-09-23</td>\n",
       "      <td>3932850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2016-09-24</td>\n",
       "      <td>3802328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2016-09-25</td>\n",
       "      <td>3802328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2016-09-26</td>\n",
       "      <td>4013991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2016-09-27</td>\n",
       "      <td>4013991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2016-09-28</td>\n",
       "      <td>4013991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2016-09-29</td>\n",
       "      <td>4013991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>2016-09-30</td>\n",
       "      <td>3932850</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   predict_date  predict_power_consumption\n",
       "0    2016-09-01                    3638640\n",
       "1    2016-09-02                    3557499\n",
       "2    2016-09-03                    3471425\n",
       "3    2016-09-04                    3471425\n",
       "4    2016-09-05                    3638640\n",
       "5    2016-09-06                    3638640\n",
       "6    2016-09-07                    3638640\n",
       "7    2016-09-08                    3711245\n",
       "8    2016-09-09                    3630104\n",
       "9    2016-09-10                    3654846\n",
       "10   2016-09-11                    3654846\n",
       "11   2016-09-12                    3822061\n",
       "12   2016-09-13                    3857213\n",
       "13   2016-09-14                    3926914\n",
       "14   2016-09-15                    3961120\n",
       "15   2016-09-16                    3879979\n",
       "16   2016-09-17                    3772633\n",
       "17   2016-09-18                    3772633\n",
       "18   2016-09-19                    3939847\n",
       "19   2016-09-20                    3939847\n",
       "20   2016-09-21                    3984296\n",
       "21   2016-09-22                    4013991\n",
       "22   2016-09-23                    3932850\n",
       "23   2016-09-24                    3802328\n",
       "24   2016-09-25                    3802328\n",
       "25   2016-09-26                    4013991\n",
       "26   2016-09-27                    4013991\n",
       "27   2016-09-28                    4013991\n",
       "28   2016-09-29                    4013991\n",
       "29   2016-09-30                    3932850"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final.head()\n",
    "df_final.shape\n",
    "commit_df = pd.date_range('2016/9/1', periods=30, freq='D')\n",
    "commit_df = pd.DataFrame(commit_df)\n",
    "commit_df.columns = ['predict_date']\n",
    "# y_predict = gbm.predict(test_lgb.values)\n",
    "commit_df['predict_power_consumption'] = pd.DataFrame(y_predict).astype('int')\n",
    "commit_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# machine learning\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC, LinearSVC\n",
    "# from sklearn.ensemble import RandomForestClassifier\n",
    "# from sklearn.neighbors import KNeighborsClassifier\n",
    "# from sklearn.naive_bayes import GaussianNB\n",
    "# from sklearn.linear_model import Perceptron\n",
    "# from sklearn.linear_model import SGDClassifier\n",
    "# from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "from sklearn.ensemble import BaggingRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import cross_val_score, train_test_split\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2900464.0\n",
      "['6.0' '60.0' '1.0' '3.0' '2015.0' 2795163.05357 769697.864999\n",
      " -674272.145833 -1223101.62821 -342783.154545 -1352485.7 -93716.5375\n",
      " -220744.01428600002 -739169.857143 -1042483.85714 252348.35714299997]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "dow                object\n",
       "doy                object\n",
       "day                object\n",
       "month              object\n",
       "year               object\n",
       "mean              float64\n",
       "std               float64\n",
       "first_half        float64\n",
       "second_half       float64\n",
       "month_period_1    float64\n",
       "month_period_2    float64\n",
       "month_period_3    float64\n",
       "week_period_1     float64\n",
       "week_period_2     float64\n",
       "week_period_3     float64\n",
       "week_period_4     float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "\n",
    "# train = df_final\n",
    "# x_test = train[train.]\n",
    "# y = train['power_consumption']\n",
    "# X = train.drop('power_consumption',axis=1)\n",
    "\n",
    "\n",
    "final_train_data = df_final[~((df_final.year==2016)&(df_final.month==9))].drop(['power_consumption'],1)\n",
    "final_train_data = final_train_data.astype(float)\n",
    "final_test_data = df_final[((df_final.year==2016)&(df_final.month==9))].drop(['power_consumption'],1)\n",
    "final_test_data = final_test_data.astype(float)\n",
    "train_target = df_final[~((df_final.year==2016)&(df_final.month==9))][['power_consumption']]\n",
    "\n",
    "train = final_train_data.copy()\n",
    "train[['dow','doy','day','month','year']] = train[['dow','doy','day','month','year']]\\\n",
    ".astype(str)\n",
    "test = final_test_data.copy()\n",
    "test[['dow','doy','day','month','year']] = test[['dow','doy','day','month','year',]]\\\n",
    ".astype(str)\n",
    "\n",
    "X_lgb = train.values\n",
    "y_lgb = train_target.values.reshape(train_target.values.shape[0],)\n",
    "print y_lgb[0]\n",
    "print X_lgb[0,:]\n",
    "train.dtypes#.shape[0]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "\n",
    "# https://www.kaggle.com/arthurtok/introduction-to-ensembling-stacking-in-python\n",
    "# Going to use these 5 base models for the stacking\n",
    "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.cross_validation import KFold;\n",
    "\n",
    "train['power_consumption'] = train_target\n",
    "\n",
    "\n",
    "def get_oof(clf, x_train, y_train, x_test):\n",
    "    oof_train = np.zeros((ntrain,))\n",
    "    oof_test = np.zeros((ntest,))\n",
    "    oof_test_skf = np.empty((NFOLDS, ntest))\n",
    "\n",
    "    for i, (train_index, test_index) in enumerate(kf):\n",
    "        x_tr = x_train[train_index]\n",
    "        y_tr = y_train[train_index]\n",
    "        x_te = x_train[test_index]\n",
    "\n",
    "        clf.train(x_tr, y_tr)\n",
    "\n",
    "        oof_train[test_index] = clf.predict(x_te)\n",
    "        oof_test_skf[i, :] = clf.predict(x_test)\n",
    "\n",
    "    oof_test[:] = oof_test_skf.mean(axis=0)\n",
    "    return oof_train.reshape(-1, 1), oof_test.reshape(-1, 1)\n",
    "\n",
    "# Some useful parameters which will come in handy later on\n",
    "ntrain = train.shape[0]\n",
    "ntest = test.shape[0]\n",
    "SEED = 0 # for reproducibility\n",
    "NFOLDS = 5 # set folds for out-of-fold prediction\n",
    "kf = KFold(ntrain, n_folds= NFOLDS, random_state=SEED)\n",
    "\n",
    "# Class to extend the Sklearn classifier\n",
    "class SklearnHelper(object):\n",
    "    def __init__(self, clf, seed=0, params=None):\n",
    "        params['random_state'] = seed\n",
    "        self.clf = clf(**params)\n",
    "\n",
    "    def train(self, x_train, y_train):\n",
    "        self.clf.fit(x_train, y_train)\n",
    "\n",
    "    def predict(self, x):\n",
    "        return self.clf.predict(x)\n",
    "    \n",
    "    def fit(self,x,y):\n",
    "        return self.clf.fit(x,y)\n",
    "    \n",
    "    def feature_importances(self,x,y):\n",
    "        print(self.clf.fit(x,y).feature_importances_)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Unknown label type: 'continuous'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-73-dcf1660cd82d>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     60\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     61\u001b[0m \u001b[1;31m# Create our OOF train and test predictions. These base results will be used as new features\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 62\u001b[1;33m \u001b[0met_oof_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0met_oof_test\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_oof\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0met\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx_test\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m# Extra Trees\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     63\u001b[0m \u001b[0mrf_oof_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrf_oof_test\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_oof\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrf\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mx_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx_test\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m# Random Forest\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     64\u001b[0m \u001b[0mada_oof_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mada_oof_test\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_oof\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mada\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx_test\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m# AdaBoost\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-72-5c59b1bad165>\u001b[0m in \u001b[0;36mget_oof\u001b[1;34m(clf, x_train, y_train, x_test)\u001b[0m\n\u001b[0;32m     19\u001b[0m         \u001b[0mx_te\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mx_train\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mtest_index\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     20\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 21\u001b[1;33m         \u001b[0mclf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_tr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_tr\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     22\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     23\u001b[0m         \u001b[0moof_train\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mtest_index\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_te\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-72-5c59b1bad165>\u001b[0m in \u001b[0;36mtrain\u001b[1;34m(self, x_train, y_train)\u001b[0m\n\u001b[0;32m     41\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     42\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mtrain\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 43\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     44\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     45\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m/opt/ds/local/lib/python2.7/site-packages/sklearn/ensemble/forest.pyc\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[0;32m    269\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    270\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 271\u001b[1;33m         \u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mexpanded_class_weight\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_validate_y_class_weight\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    272\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    273\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"dtype\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mNone\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[0mDOUBLE\u001b[0m \u001b[1;32mor\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mflags\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcontiguous\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m/opt/ds/local/lib/python2.7/site-packages/sklearn/ensemble/forest.pyc\u001b[0m in \u001b[0;36m_validate_y_class_weight\u001b[1;34m(self, y)\u001b[0m\n\u001b[0;32m    455\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    456\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_validate_y_class_weight\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 457\u001b[1;33m         \u001b[0mcheck_classification_targets\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    458\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    459\u001b[0m         \u001b[0my\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m/opt/ds/local/lib/python2.7/site-packages/sklearn/utils/multiclass.pyc\u001b[0m in \u001b[0;36mcheck_classification_targets\u001b[1;34m(y)\u001b[0m\n\u001b[0;32m    170\u001b[0m     if y_type not in ['binary', 'multiclass', 'multiclass-multioutput',\n\u001b[0;32m    171\u001b[0m             'multilabel-indicator', 'multilabel-sequences']:\n\u001b[1;32m--> 172\u001b[1;33m         \u001b[1;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Unknown label type: %r\"\u001b[0m \u001b[1;33m%\u001b[0m \u001b[0my_type\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    173\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    174\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: Unknown label type: 'continuous'"
     ]
    }
   ],
   "source": [
    "# # Put in our parameters for said classifiers\n",
    "# # Random Forest parameters\n",
    "# rf_params = {\n",
    "#     'n_jobs': -1,\n",
    "#     'n_estimators': 500,\n",
    "#      'warm_start': True, \n",
    "#      #'max_features': 0.2,\n",
    "#     'max_depth': 6,\n",
    "#     'min_samples_leaf': 2,\n",
    "#     'max_features' : 'sqrt',\n",
    "#     'verbose': 0\n",
    "# }\n",
    "\n",
    "# # Extra Trees Parameters\n",
    "# et_params = {\n",
    "#     'n_jobs': -1,\n",
    "#     'n_estimators':500,\n",
    "#     #'max_features': 0.5,\n",
    "#     'max_depth': 8,\n",
    "#     'min_samples_leaf': 2,\n",
    "#     'verbose': 0\n",
    "# }\n",
    "\n",
    "# # AdaBoost parameters\n",
    "# ada_params = {\n",
    "#     'n_estimators': 500,\n",
    "#     'learning_rate' : 0.75\n",
    "# }\n",
    "\n",
    "# # Gradient Boosting parameters\n",
    "# gb_params = {\n",
    "#     'n_estimators': 500,\n",
    "#      #'max_features': 0.2,\n",
    "#     'max_depth': 5,\n",
    "#     'min_samples_leaf': 2,\n",
    "#     'verbose': 0\n",
    "# }\n",
    "\n",
    "# # Support Vector Classifier parameters \n",
    "# svc_params = {\n",
    "#     'kernel' : 'linear',\n",
    "#     'C' : 0.025\n",
    "#     }\n",
    "# # Create 5 objects that represent our 4 models\n",
    "# rf = SklearnHelper(clf=RandomForestClassifier, seed=SEED, params=rf_params)\n",
    "# et = SklearnHelper(clf=ExtraTreesClassifier, seed=SEED, params=et_params)    ##### 无法处理 float ？？？\n",
    "# ada = SklearnHelper(clf=AdaBoostClassifier, seed=SEED, params=ada_params)\n",
    "# gb = SklearnHelper(clf=GradientBoostingClassifier, seed=SEED, params=gb_params)\n",
    "# svc = SklearnHelper(clf=SVC, seed=SEED, params=svc_params)\n",
    "\n",
    "# # Create Numpy arrays of train, test and target ( Survived) dataframes to feed into our models\n",
    "# # y_train = train_target#.ravel()\n",
    "\n",
    "# # x_train = train.values # Creates an array of the train data\n",
    "# # x_test = test.values # Creats an array of the test data\n",
    "# y_train = train['power_consumption'].ravel()\n",
    "# train = train.drop(['power_consumption'], axis=1)\n",
    "# x_train = train.values # Creates an array of the train data\n",
    "# x_test = test.values \n",
    "\n",
    "# # Create our OOF train and test predictions. These base results will be used as new features\n",
    "# et_oof_train, et_oof_test = get_oof(et, x_train, y_train, x_test) # Extra Trees\n",
    "# rf_oof_train, rf_oof_test = get_oof(rf,x_train, y_train, x_test) # Random Forest\n",
    "# ada_oof_train, ada_oof_test = get_oof(ada, x_train, y_train, x_test) # AdaBoost \n",
    "# gb_oof_train, gb_oof_test = get_oof(gb,x_train, y_train, x_test) # Gradient Boost\n",
    "# svc_oof_train, svc_oof_test = get_oof(svc,x_train, y_train, x_test) # Support Vector Classifier\n",
    "\n",
    "# print(\"Training is complete\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "y_train = train['power_consumption'].ravel()\n",
    "# y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "indices are out-of-bounds",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-49-bdd003d25bbd>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m    123\u001b[0m \u001b[0mls\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mSklearnWrapper\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mclf\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mLasso\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mseed\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mSEED\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mls_params\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    124\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 125\u001b[1;33m \u001b[0mxg_oof_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mxg_oof_test\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_oof\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mxg\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    126\u001b[0m \u001b[0met_oof_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0met_oof_test\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_oof\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0met\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    127\u001b[0m \u001b[0mrf_oof_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrf_oof_test\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_oof\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-49-bdd003d25bbd>\u001b[0m in \u001b[0;36mget_oof\u001b[1;34m(clf)\u001b[0m\n\u001b[0;32m     62\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     63\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mtrain_index\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtest_index\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 64\u001b[1;33m         \u001b[0mx_tr\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mx_train\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mtrain_index\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     65\u001b[0m         \u001b[0my_tr\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mtrain_index\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     66\u001b[0m         \u001b[0mx_te\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mx_train\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mtest_index\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m/opt/ds/local/lib/python2.7/site-packages/pandas/core/frame.pyc\u001b[0m in \u001b[0;36m__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   2051\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mSeries\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mIndex\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2052\u001b[0m             \u001b[1;31m# either boolean or fancy integer index\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2053\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_getitem_array\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2054\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2055\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_getitem_frame\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m/opt/ds/local/lib/python2.7/site-packages/pandas/core/frame.pyc\u001b[0m in \u001b[0;36m_getitem_array\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   2096\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2097\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mix\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_convert_to_indexer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2098\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mconvert\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2099\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2100\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_getitem_multilevel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m/opt/ds/local/lib/python2.7/site-packages/pandas/core/generic.pyc\u001b[0m in \u001b[0;36mtake\u001b[1;34m(self, indices, axis, convert, is_copy, **kwargs)\u001b[0m\n\u001b[0;32m   1667\u001b[0m         new_data = self._data.take(indices,\n\u001b[0;32m   1668\u001b[0m                                    \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_block_manager_axis\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1669\u001b[1;33m                                    convert=True, verify=True)\n\u001b[0m\u001b[0;32m   1670\u001b[0m         \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_constructor\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnew_data\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1671\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m/opt/ds/local/lib/python2.7/site-packages/pandas/core/internals.pyc\u001b[0m in \u001b[0;36mtake\u001b[1;34m(self, indexer, axis, verify, convert)\u001b[0m\n\u001b[0;32m   3953\u001b[0m         \u001b[0mn\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3954\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mconvert\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3955\u001b[1;33m             \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmaybe_convert_indices\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3956\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3957\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mverify\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m/opt/ds/local/lib/python2.7/site-packages/pandas/core/indexing.pyc\u001b[0m in \u001b[0;36mmaybe_convert_indices\u001b[1;34m(indices, n)\u001b[0m\n\u001b[0;32m   1871\u001b[0m     \u001b[0mmask\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mindices\u001b[0m \u001b[1;33m>=\u001b[0m \u001b[0mn\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m|\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mindices\u001b[0m \u001b[1;33m<\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1872\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0many\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1873\u001b[1;33m         \u001b[1;32mraise\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"indices are out-of-bounds\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1874\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mindices\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1875\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mIndexError\u001b[0m: indices are out-of-bounds"
     ]
    }
   ],
   "source": [
    "# # 尝试stacking 来源 https://www.kaggle.com/eliotbarr/stacking-starter/code\n",
    "\n",
    "# import pandas as pd\n",
    "# import numpy as np\n",
    "# from scipy.stats import skew\n",
    "# import xgboost as xgb\n",
    "# from sklearn.cross_validation import KFold\n",
    "# from sklearn.ensemble import ExtraTreesRegressor\n",
    "# from sklearn.ensemble import RandomForestRegressor\n",
    "# from sklearn.metrics import mean_squared_error\n",
    "# from sklearn.linear_model import Ridge, RidgeCV, ElasticNet, LassoCV, Lasso\n",
    "# from math import sqrt\n",
    "\n",
    "\n",
    "# TARGET = 'SalePrice'\n",
    "# NFOLDS = 5\n",
    "# SEED = 0\n",
    "# NROWS = None\n",
    "# ntrain = train.shape[0]\n",
    "# ntest = test.shape[0]\n",
    "\n",
    "\n",
    "# #creating matrices for sklearn:\n",
    "\n",
    "# x_train = train#np.array(all_data[:train.shape[0]])\n",
    "# x_test = test#np.array(all_data[train.shape[0]:])\n",
    "# y_train = train_target#np.log(train[TARGET]+1)\n",
    "\n",
    "# kf = KFold(ntrain, n_folds=NFOLDS, shuffle=True, random_state=SEED)\n",
    "\n",
    "\n",
    "# class SklearnWrapper(object):\n",
    "#     def __init__(self, clf, seed=0, params=None):\n",
    "#         params['random_state'] = seed\n",
    "#         self.clf = clf(**params)\n",
    "\n",
    "#     def train(self, x_train, y_train):\n",
    "#         self.clf.fit(x_train, y_train)\n",
    "\n",
    "#     def predict(self, x):\n",
    "#         return self.clf.predict(x)\n",
    "\n",
    "\n",
    "# class XgbWrapper(object):\n",
    "#     def __init__(self, seed=0, params=None):\n",
    "#         self.param = params\n",
    "#         self.param['seed'] = seed\n",
    "#         self.nrounds = params.pop('nrounds', 250)\n",
    "\n",
    "#     def train(self, x_train, y_train):\n",
    "#         dtrain = xgb.DMatrix(x_train, label=y_train)\n",
    "#         self.gbdt = xgb.train(self.param, dtrain, self.nrounds)\n",
    "\n",
    "#     def predict(self, x):\n",
    "#         return self.gbdt.predict(xgb.DMatrix(x))\n",
    "\n",
    "\n",
    "# def get_oof(clf):  # 出现错误 out of bounds, don't know why \n",
    "#     oof_train = np.zeros((ntrain,))\n",
    "#     oof_test = np.zeros((ntest,))\n",
    "#     oof_test_skf = np.empty((NFOLDS, ntest))\n",
    "\n",
    "#     for i, (train_index, test_index) in enumerate(kf):\n",
    "#         x_tr = x_train[train_index]\n",
    "#         y_tr = y_train[train_index]\n",
    "#         x_te = x_train[test_index]\n",
    "\n",
    "#         clf.train(x_tr, y_tr)\n",
    "\n",
    "#         oof_train[test_index] = clf.predict(x_te)\n",
    "#         oof_test_skf[i, :] = clf.predict(x_test)\n",
    "\n",
    "#     oof_test[:] = oof_test_skf.mean(axis=0)\n",
    "#     return oof_train.reshape(-1, 1), oof_test.reshape(-1, 1)\n",
    "\n",
    "\n",
    "# et_params = {\n",
    "#     'n_jobs': 16,\n",
    "#     'n_estimators': 100,\n",
    "#     'max_features': 0.5,\n",
    "#     'max_depth': 12,\n",
    "#     'min_samples_leaf': 2,\n",
    "# }\n",
    "\n",
    "# rf_params = {\n",
    "#     'n_jobs': 16,\n",
    "#     'n_estimators': 100,\n",
    "#     'max_features': 0.2,\n",
    "#     'max_depth': 12,\n",
    "#     'min_samples_leaf': 2,\n",
    "# }\n",
    "\n",
    "# xgb_params = {\n",
    "#     'seed': 0,\n",
    "#     'colsample_bytree': 0.7,\n",
    "#     'silent': 1,\n",
    "#     'subsample': 0.7,\n",
    "#     'learning_rate': 0.075,\n",
    "#     'objective': 'reg:linear',\n",
    "#     'max_depth': 4,\n",
    "#     'num_parallel_tree': 1,\n",
    "#     'min_child_weight': 1,\n",
    "#     'eval_metric': 'rmse',\n",
    "#     'nrounds': 500\n",
    "# }\n",
    "\n",
    "\n",
    "\n",
    "# rd_params={\n",
    "#     'alpha': 10\n",
    "# }\n",
    "\n",
    "\n",
    "# ls_params={\n",
    "#     'alpha': 0.005\n",
    "# }\n",
    "\n",
    "\n",
    "# xg = XgbWrapper(seed=SEED, params=xgb_params)\n",
    "# et = SklearnWrapper(clf=ExtraTreesRegressor, seed=SEED, params=et_params)\n",
    "# rf = SklearnWrapper(clf=RandomForestRegressor, seed=SEED, params=rf_params)\n",
    "# rd = SklearnWrapper(clf=Ridge, seed=SEED, params=rd_params)\n",
    "# ls = SklearnWrapper(clf=Lasso, seed=SEED, params=ls_params)\n",
    "\n",
    "# xg_oof_train, xg_oof_test = get_oof(xg)\n",
    "# et_oof_train, et_oof_test = get_oof(et)\n",
    "# rf_oof_train, rf_oof_test = get_oof(rf)\n",
    "# rd_oof_train, rd_oof_test = get_oof(rd)\n",
    "# ls_oof_train, ls_oof_test = get_oof(ls)\n",
    "\n",
    "# print(\"XG-CV: {}\".format(sqrt(mean_squared_error(y_train, xg_oof_train))))\n",
    "# print(\"ET-CV: {}\".format(sqrt(mean_squared_error(y_train, et_oof_train))))\n",
    "# print(\"RF-CV: {}\".format(sqrt(mean_squared_error(y_train, rf_oof_train))))\n",
    "# print(\"RD-CV: {}\".format(sqrt(mean_squared_error(y_train, rd_oof_train))))\n",
    "# print(\"LS-CV: {}\".format(sqrt(mean_squared_error(y_train, ls_oof_train))))\n",
    "\n",
    "\n",
    "# x_train = np.concatenate((xg_oof_train, et_oof_train, rf_oof_train, rd_oof_train, ls_oof_train), axis=1)\n",
    "# x_test = np.concatenate((xg_oof_test, et_oof_test, rf_oof_test, rd_oof_test, ls_oof_test), axis=1)\n",
    "\n",
    "# print(\"{},{}\".format(x_train.shape, x_test.shape))\n",
    "\n",
    "# dtrain = xgb.DMatrix(x_train, label=y_train)\n",
    "# dtest = xgb.DMatrix(x_test)\n",
    "\n",
    "# xgb_params = {\n",
    "#     'seed': 0,\n",
    "#     'colsample_bytree': 0.8,\n",
    "#     'silent': 1,\n",
    "#     'subsample': 0.6,\n",
    "#     'learning_rate': 0.01,\n",
    "#     'objective': 'reg:linear',\n",
    "#     'max_depth': 1,\n",
    "#     'num_parallel_tree': 1,\n",
    "#     'min_child_weight': 1,\n",
    "#     'eval_metric': 'rmse',\n",
    "# }\n",
    "\n",
    "# res = xgb.cv(xgb_params, dtrain, num_boost_round=1000, nfold=4, seed=SEED, stratified=False,\n",
    "#              early_stopping_rounds=25, verbose_eval=10, show_stdv=True)\n",
    "\n",
    "# best_nrounds = res.shape[0] - 1\n",
    "# cv_mean = res.iloc[-1, 0]\n",
    "# cv_std = res.iloc[-1, 1]\n",
    "\n",
    "# print('Ensemble-CV: {0}+{1}'.format(cv_mean, cv_std))\n",
    "\n",
    "# gbdt = xgb.train(xgb_params, dtrain, best_nrounds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# # blending 寒老师给的资料\n",
    "# 不清楚输入的数据格式应该是什么， 所以暂时放一放\n",
    "\n",
    "# from __future__ import division\n",
    "# import numpy as np\n",
    "# # import load_data\n",
    "# from sklearn.cross_validation import StratifiedKFold\n",
    "# from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\n",
    "# from sklearn.ensemble import GradientBoostingClassifier\n",
    "# from sklearn.linear_model import LogisticRegression\n",
    " \n",
    "\n",
    "# def logloss(attempt, actual, epsilon=1.0e-15):\n",
    "#     \"\"\"Logloss, i.e. the score of the bioresponse competition.\n",
    "#     \"\"\"\n",
    "#     attempt = np.clip(attempt, epsilon, 1.0-epsilon)\n",
    "#     return - np.mean(actual * np.log(attempt) +\n",
    "#                      (1.0 - actual) * np.log(1.0 - attempt))\n",
    "\n",
    "\n",
    "# np.random.seed(0)  # seed to shuffle the train set\n",
    "\n",
    "# n_folds = 10\n",
    "# verbose = True\n",
    "# shuffle = False\n",
    "\n",
    "# X, y, X_submission = train, train_target, test#load_data.load()\n",
    "\n",
    "# # if shuffle:\n",
    "# #     idx = np.random.permutation(y.size)\n",
    "# #     X = X[idx]\n",
    "# #     y = y[idx]\n",
    "\n",
    "# # skf = list(StratifiedKFold(y, n_folds))\n",
    "\n",
    "# clfs = [RandomForestClassifier(n_estimators=100, n_jobs=-1, criterion='gini'),\n",
    "#         RandomForestClassifier(n_estimators=100, n_jobs=-1, criterion='entropy'),\n",
    "#         ExtraTreesClassifier(n_estimators=100, n_jobs=-1, criterion='gini'),\n",
    "#         ExtraTreesClassifier(n_estimators=100, n_jobs=-1, criterion='entropy'),\n",
    "#         GradientBoostingClassifier(learning_rate=0.05, subsample=0.5, max_depth=6, n_estimators=50)]\n",
    "# y\n",
    "# # print \"Creating train and test sets for blending.\"\n",
    "\n",
    "# dataset_blend_train = np.zeros((X.shape[0], len(clfs)))\n",
    "# dataset_blend_test = np.zeros((X_submission.shape[0], len(clfs)))\n",
    "\n",
    "# # for j, clf in enumerate(clfs):\n",
    "# #     print j, clf\n",
    "# #     dataset_blend_test_j = np.zeros((X_submission.shape[0], len(skf)))\n",
    "# #     for i, (train, test) in enumerate(skf):\n",
    "# #         print \"Fold\", i\n",
    "# #         X_train = X[train]\n",
    "# #         y_train = y[train]\n",
    "# #         X_test = X[test]\n",
    "# #         y_test = y[test]\n",
    "# #         clf.fit(X_train, y_train)\n",
    "# #         y_submission = clf.predict_proba(X_test)[:, 1]\n",
    "# #         dataset_blend_train[test, j] = y_submission\n",
    "# #         dataset_blend_test_j[:, i] = clf.predict_proba(X_submission)[:, 1]\n",
    "# #     dataset_blend_test[:, j] = dataset_blend_test_j.mean(1)\n",
    "\n",
    "# # print\n",
    "# # print \"Blending.\"\n",
    "# # clf = LogisticRegression()\n",
    "# # clf.fit(dataset_blend_train, y)\n",
    "# # y_submission = clf.predict_proba(dataset_blend_test)[:, 1]\n",
    "\n",
    "# # print \"Linear stretch of predictions to [0,1]\"\n",
    "# # y_submission = (y_submission - y_submission.min()) / (y_submission.max() - y_submission.min())\n",
    "\n",
    "# # print \"Saving Results.\"\n",
    "# # tmp = np.vstack([range(1, len(y_submission)+1), y_submission]).T\n",
    "# # np.savetxt(fname='submission.csv', X=tmp, fmt='%d,%0.9f',\n",
    "# #            header='MoleculeId,PredictedProbability', comments='')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "\n",
    "# 画图为准\n",
    "# y2 = cur['predict_power_consumption'].values\n",
    "x = cur['predict_date'].values\n",
    "y = ref['predict_power_consumption'].values\n",
    "\n",
    "# plt.plot(x, y)\n",
    "# plt.plot(x,y2)\n",
    "# plt.legend(['ref','cur'],loc = 0, ncol = 2)\n",
    "plt.subplot()\n",
    "\n",
    "models = [\n",
    "#     ExtraTreesRegressor(),\n",
    "##     BaggingRegressor(),\n",
    "#     RandomForestRegressor(),\n",
    "    GradientBoostingRegressor(),\n",
    "    ]\n",
    "\n",
    "for model in models:\n",
    "    model.fit(train,train_target)\n",
    "    y2 = model.predict(test)\n",
    "    plt.figure\n",
    "    plt.plot(x, y)\n",
    "    plt.plot(x,y2)\n",
    "    #     plt.legend(['ref','cur'],loc = 0, ncol = 2)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
